@using Microsoft.Extensions.Logging
@typeparam TComponent
@namespace Carlton.Core.Components.Lab
@inject ILogger<LabComponentErrorBoundary<TComponent>> Logger
@inject IExceptionDisplayService ExceptionDisplayService
@inject IComponentExceptionLoggingService ComponentExceptionLoggingService


<ErrorBoundary Context="ex" @ref="Boundary">
    <ChildContent>
        @ChildContent
    </ChildContent>
    <ErrorContent>
        <ErrorPrompt Exception="ex" OnClick="Boundary.Recover" ExceptionDisplayFunc="ExceptionDisplayFunc" ExceptionLogAct="ExceptionLogAct" />
    </ErrorContent>
</ErrorBoundary>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private Func<Exception, (string errorHeader, string errorMessage, string iconClass)> ExceptionDisplayFunc { get; set; }

    private Action<Exception> ExceptionLogAct { get; set; }

    private ErrorBoundary Boundary { get; set; }

    protected override void OnInitialized()
    {
        ExceptionDisplayFunc =  (ex) =>
        {
            var (errorHeader, errorMessage, iconClass) = ExceptionDisplayService.GetExceptionErrorPrompt(ex);
            return (errorHeader, errorMessage, iconClass);
        };

        ExceptionLogAct = (ex) => ComponentExceptionLoggingService.LogException(Logger, ex, typeof(TComponent));

        base.OnInitialized();
    }
}





