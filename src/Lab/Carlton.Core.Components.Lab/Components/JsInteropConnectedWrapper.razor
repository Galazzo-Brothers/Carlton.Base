@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using Carlton.Core.Lab.Logging
@namespace Carlton.Core.Lab
@typeparam TViewModel
@typeparam TState
@inherits ConnectedWrapper<TState, TViewModel>
@inject IJSRuntime JsRuntime;
@inject ILogger<JsInteropConnectedWrapper<TViewModel, TState>> Logger;

<FluxErrorBoundary TComponent="TViewModel">
    <ChildContent>
        <ConnectedWrapperContent SpinnerContent="SpinnerContent"
                                   WrappedComponentType="WrappedComponentType"
                                   Parameters="GetParameters()"
                                   IsLoading="IsLoading" />
    </ChildContent>
    <ErrorPrompt Context="error">
        <ErrorPrompt ErrorHeader="@error.Header" ErrorIconClass="@error.IconClass" ErrorMessage="@error.Message" OnClick="error.Recover" />
    </ErrorPrompt>
</FluxErrorBoundary>


@code {
    private const string Import = "import";

    [Parameter]
    public string JsModule { get; set; }
    [Parameter]
    public string JsFunction { get; set; }
    [Parameter]
    public object[] JsParameters { get; set; }

    protected override async Task<TViewModel> GetViewModel()
    {
        var traceGuid = Guid.NewGuid();
        var vmDisplayName = typeof(TViewModel).GetDisplayName();
        var vmQueryTraceGuid = $"ViewModelJsInteropQuery_{vmDisplayName}_{traceGuid}";
        using (Logger.BeginScope(vmQueryTraceGuid))
        {
            try
            {
                var vmType = typeof(TViewModel).GetDisplayName();
                Logger.ViewModelJsInteropRefreshStarted(vmType);
                await using var module = await JsRuntime.InvokeAsync<IJSObjectReference>(Import, JsModule);
                var result = await module.InvokeAsync<TViewModel>(JsFunction, CancellationToken.None, JsParameters);
                Logger.ViewModelJsInteropRefreshCompleted(vmType);
                return result;
            }
            catch (JSException ex)
            {
                Logger.ViewModelJsInteropRefreshError(ex, typeof(TViewModel).GetDisplayName());
                throw;
            }
        }
    }
}
