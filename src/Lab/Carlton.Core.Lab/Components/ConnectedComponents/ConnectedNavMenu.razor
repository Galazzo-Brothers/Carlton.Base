@using Carlton.Core.Components.AccordionSelect
@namespace Carlton.Core.Lab.Components
@attribute [ObserveStateEvents("MenuItemSelected")]
@attribute [ObserveStateEvents("MenuItemExpandedStateChanged")]
@inherits BaseConnectedComponent<NavMenuViewModel>


<AccordionSelectGroup TValue="ComponentState"
                      Groups="ComponentStateGroups"
                      SelectedGroupIndex="ViewModel.SelectedComponentIndex"
                      SelectedItemIndex="ViewModel.SelectedStateIndex"
                      OnExpandedStateChanged="args => base.OnComponentEvent.InvokeAsync(new SelectMenuExpandedCommand(args.GroupIndexID, args.IsExpanded))"
                      OnSelectedItemChanged="args => base.OnComponentEvent.InvokeAsync(new SelectMenuItemCommand(args.GroupIndexID, args.ItemIndexID, args.Item))" />


@code{
    private IEnumerable<SelectGroup<ComponentState>> ComponentStateGroups { get; set; }

    protected override void OnParametersSet()
    {
        ParseComponentStatesIntoAccordionGroups();
        base.OnParametersSet();
    }

    private void ParseComponentStatesIntoAccordionGroups()
    {
        var components = ViewModel.MenuItems;

        var builder = new AccordionSelectGroupBuilder<ComponentState>();

        foreach(var component in components)
        {            
            var dictionary = component.ComponentStates.ToDictionary(_ => _.DisplayName, _ => _);    
            builder.AddGroup(component.ComponentType.GetDisplayName(), component.IsExpanded, dictionary);
        }

        ComponentStateGroups = builder.Build();
    }
}