@using Carlton.Core.Components.Navigation
@namespace Carlton.Core.Lab.Components
@attribute [ObserveStateEvent("MenuItemSelected")]
@attribute [ObserveStateEvent("MenuItemExpandedStateChanged")]
@inherits BaseConnectedComponent<NavMenuViewModel>


<AccordionSelectGroup TValue="ComponentState"
                      Groups="ComponentStateGroups"
                      SelectedGroupIndex="ViewModel.SelectedComponentIndex"
                      SelectedItemIndex="ViewModel.SelectedStateIndex"
                      OnItemExpansionChange="this.RaiseComponentFluxEvent<NavMenuViewModel, SelectMenuExpandedCommand>"
                      OnItemSelected="this.RaiseComponentFluxEvent<NavMenuViewModel, SelectMenuItemCommand>" />


@code {
    private IEnumerable<AccordionSelectGroupModel<ComponentState>> ComponentStateGroups { get; set; }

    protected override void OnParametersSet()
    {
        ParseComponentStatesIntoAccordionGroups();
        base.OnParametersSet();
    }

    private void ParseComponentStatesIntoAccordionGroups()
    {
        var components = ViewModel.MenuItems;

        var builder = new AccordionSelectGroupModelBuilder<ComponentState>();

        foreach (var component in components)
        {
            var dictionary = component.ComponentStates.ToDictionary(_ => _.DisplayName, _ => _);
            builder.AddGroup(component.ComponentType.GetDisplayName(), component.IsExpanded, dictionary);
        }

        ComponentStateGroups = builder.Build();
    }
}