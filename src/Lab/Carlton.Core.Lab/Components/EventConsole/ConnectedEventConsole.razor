@using Carlton.Core.Components.Buttons
@using Carlton.Core.Components.Consoles
@using Carlton.Core.Lab.Extensions
@namespace Carlton.Core.Lab.Components.EventConsole
@attribute [ObserveStateEvent("EventRecorded")]
@attribute [ObserveStateEvent("EventsCleared")]
@inherits BaseConnectedComponent<EventConsoleViewModel>

@*
    Represents an event console component.
    It observes state events and displays recorded events in a console.
    It also provides a button to clear the recorded events.
*@

<div class="event-console">
    <Console IsReadOnly="true" Text="@RecordedEventsText" />
    <IconButton Icon="delete"
                OnClick="this.RaiseComponentFluxEvent<EventConsoleViewModel, ClearEventsCommand>" />
</div>

@code {

    private string RecordedEventsText { get; set; }

    protected override void OnParametersSet()
    {
        var consoleText = new StringBuilder();
        foreach(var evt in ViewModel.RecordedEvents)
        {
            var args = (evt.EventObj == null) ? "{}" : JsonSerializer.Serialize(evt.EventObj);
            consoleText.AppendLine($"{evt.Name}: {args}");
        }
        RecordedEventsText = consoleText.ToString().Trim();
        base.OnParametersSet();
    }
}


