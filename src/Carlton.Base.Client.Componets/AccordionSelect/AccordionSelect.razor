@namespace Carlton.Base.Components
@typeparam TValue

<div class="accordion-select">
    <div class="@AccordionHeaderCssClass" @onclick="() => IsExpanded = !IsExpanded">
        <span class="@AccordionIconBtnCssClass"></span>
        <span class="item-group-name">
            @Title
        </span>
    </div>
    <div class="@ItemContainerCssClass">
        @foreach(var item in Items)
        {
            <div class="@ItemCss(item.Value)" @onclick="() => OnItemSelected(item.Value)">
                <span class="@ItemIconCss"></span>
                <span class="item-name">
                    @item.Key
                </span>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public Dictionary<string, TValue> Items { get; set; } = new Dictionary<string, TValue>();

    [Parameter]
    public TValue SelectedValue { get; set; }

    [Parameter]
    public bool IsExpanded { get; set; }

    [Parameter]
    public EventCallback<TValue> SelectedItemChanged { get; set; }

    private string AccordionHeaderCssClass
    {
        get => new CssBuilder("accordion-header")
                .AddClass("selected", ValueExists(SelectedValue))
                .Build();
    }

    private string AccordionIconBtnCssClass
    {
        get => new CssBuilder("accordion-icon-btn")
                 .AddClass("mdi mdi-icon mdi-24px")
                 .AddClass("mdi-minus-box-outline", IsExpanded)
                 .AddClass("mdi-plus-box-outline", !IsExpanded)
                 .Build();
    }

    private string ItemContainerCssClass
    {
        get => new CssBuilder("item-container")
                 .AddClass("collapsed", !IsExpanded)
                 .Build();
    }

    private Func<TValue, string> ItemCss
    {
        get => (value) => new CssBuilder("item")
            .AddClass("selected", value.Equals(SelectedValue))
            .Build();
    }

    private string ItemIconCss
    {
        get => new CssBuilder("icon")
               .AddClass("mdi mdi-icon mdi-12px mdi-bookmark")
               .Build();
    }

    private bool ValueExists(TValue value)
    {
        return Items.Values.Contains(value);
    }

    private async Task OnItemSelected(TValue value)
    {
        SelectedValue = value;
        await SelectedItemChanged.InvokeAsync(value);
    }
}