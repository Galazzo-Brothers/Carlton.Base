@namespace Carlton.Base.Components
@typeparam TValue

<div class="accordion-select">
    <div class="heading @(ValueExists(SelectedValue) ? "selected" : string.Empty)" @onclick="() => IsExpanded = !IsExpanded">
        <span class="mdi mdi-icon mdi-24px mdi-plus-box-outline"></span>
        <span class="item-name align-middle">
            @Title
        </span>    
    </div>
    <div class="item-container  @(!IsExpanded ? "collapsed" : string.Empty)">        
        @foreach(var item in Items)
        {
            <div class="item @(item.Value.Equals(SelectedValue) ? "selected" : string.Empty)" @onclick="() => OnItemSelected(item.Value)">
                <span class="icon mdi mdi-icon mdi-12px mdi-bookmark"></span>
                <span class="item-name align-middle">
                    @item.Key
                </span>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public Dictionary<string, TValue> Items { get; set; } = new Dictionary<string, TValue>();

    [Parameter]
    public TValue SelectedValue { get; set; }

    [Parameter]
    public bool IsExpanded { get; set; }

    [Parameter]
    public EventCallback<TValue> SelectedItemChanged { get; set; }

    private bool ValueExists(TValue value)
    {
        return Items.Values.Contains(value);
    }

    private async Task OnItemSelected(TValue value)
    {
        SelectedValue = value;
        await SelectedItemChanged.InvokeAsync(value);
    }
}