@namespace Carlton.Base.Components
<div class="select">
    <input readonly placeholder=" " value="@ValueDisplay" />
    <div class="label">@Label</div>

    @if(Disabled)
    {
        <div disabled class="options"></div>
    }
    else
    {
        <div class="options">
            @foreach(var opt in Options)
            {
                <div @onclick="()=>OnValueChanged(opt)">@opt.Key</div>
            }
        </div>
    }
</div>


@code{
    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public IReadOnlyDictionary<string, int> Options { get; set; } = new Dictionary<string, int>();

    [Parameter]
    public EventCallback<KeyValuePair<string, int>> ValueChangedCallback { get; set; }

    [Parameter]
    public int SelectedValue { get; set; }

    private string ValueDisplay
    {
        get
        {
            return Options.FirstOrDefault(_ => _.Value == SelectedValue).Key;
        }
    }

    private async Task OnValueChanged(KeyValuePair<string, int> opt)
    {
        SelectedValue = opt.Value;
        await ValueChangedCallback.InvokeAsync(opt);
    }
}