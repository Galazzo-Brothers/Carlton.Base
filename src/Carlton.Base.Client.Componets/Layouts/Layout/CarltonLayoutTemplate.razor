@namespace Carlton.Base.Components

<CascadingValue Value="_layoutState">
    <div class="@LayoutContainerCss" data-theme="@Theme.ToString()">
        <header>
            @HeaderContent
        </header>
        <nav>
            @NavContent
        </nav>
        <main>
            @Body
        </main>
        <footer class="@LayoutFooterCss">
            @FooterContent
        </footer>
    </div>
</CascadingValue>



@code {
    private LayoutState _layoutState;

    [Parameter]
    public bool? IsCollapsed
    {
        get
        {
            return _layoutState.IsCollapsed;
        }
        set
        {
            //Can only be set from child elements
            return;
        }
    }

    [Parameter]
    public Themes? Theme
    {
        get
        {
            return _layoutState.Theme;
        }
        set
        {
            //Can only be set from child elements
            return;
        }
    }

    [Parameter]
    public bool IsFixedFooter
    {
        get
        {
            return _layoutState.IsFooterFixed;
        }
        set
        {
            //Can only be set from child elements
            return;
        }
    }
    [Parameter]
    public RenderFragment HeaderContent { get; set; }
    [Parameter]
    public RenderFragment NavContent { get; set; }
    [Parameter]
    public RenderFragment Body { get; set; }
    [Parameter]
    public RenderFragment FooterContent { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if(_layoutState is null)
        {
            var themeSuccess = parameters.TryGetValue<Themes>(nameof(Theme), out var inputTheme);
            var collasedStateSuccess = parameters.TryGetValue<bool>(nameof(IsCollapsed), out var inputCollasedState);
            var isFixedFooterSuccess = parameters.TryGetValue<bool>(nameof(IsFixedFooter), out var inputIsFixedFooter);

            inputCollasedState = (collasedStateSuccess) ? inputCollasedState : false;
            inputTheme = (themeSuccess) ? inputTheme : Themes.light;
            inputIsFixedFooter = (isFixedFooterSuccess) ? inputIsFixedFooter : false;

            _layoutState = new LayoutState(inputCollasedState, inputTheme, inputIsFixedFooter, StateHasChanged);
        }


        await base.SetParametersAsync(parameters);
    }

    private string LayoutContainerCss
    {
        get => new CssBuilder("layout-container")
                .AddClass("collapsed", _layoutState.IsCollapsed)
                .Build();
    }

    private string LayoutFooterCss
    {
        get => new CssBuilder("footer")
            .AddClass("fixed", _layoutState.IsFooterFixed)
            .Build();
    }
}