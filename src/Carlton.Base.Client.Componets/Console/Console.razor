@namespace Carlton.Base.Components

<div class="console">
    <textarea rows="15"
              disabled="@IsReadOnly"
              class="@ConsoleCss"
              @onchange="OnViewModelChanged">
        @Text   
    </textarea>
</div>

@code {
    [Parameter]
    public string Text { get; set; }
    [Parameter]
    public bool IsReadOnly { get; set; }
    [Parameter]
    public Func<string, Task<bool>> ValidateFunc { get; set; } = (_) => Task.FromResult(true);
    [Parameter]
    public EventCallback<ChangeEventArgs> OnChangeCallback { get; set; }

    private bool IsValid { get; set; }
    private string ConsoleCss
    {
        get => new CssBuilder()
                .AddClass("error", !IsValid)
                .Build();
    }


    protected async override Task OnInitializedAsync()
    {
        IsValid = await ValidateFunc(Text);
        base.OnInitialized();
    }

    private async Task OnViewModelChanged(ChangeEventArgs args)
    {
        IsValid = await ValidateFunc(args.Value.ToString());

        if(IsValid)
            await OnChangeCallback.InvokeAsync(args);
    }
}