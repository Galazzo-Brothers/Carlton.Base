@namespace Carlton.Base.Components
@typeparam TItem

<div class="main-container">
    <div class="table-container">
        <div class="header-row table-row">
            <TableHeader TItem="TItem" Headings="Headings" Items="Items" OnItemsOrdered="(items)=>Items=items"  />
        </div>
        @foreach(var item in Items)
        {
            <div class="item-row table-row">
                @RowTemplate(item)
            </div>
        }
        @if (ShowPaginationRow)
        {
            <div class="pagination-row table-row">
                <TablePaginationRow TItem="TItem" CurrentItems="AllItems" RowsPerPageOpts="RowsPerPageOpts" ItemsChangedCallback="(items)=>Items=items" />
            </div>
        }
    </div>
</div>


@code {
    [Parameter]
    public IEnumerable<TableHeadingItem> Headings { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = new List<TItem>();

    [Parameter]
    public RenderFragment<TItem> RowTemplate { get; set; }

    [Parameter]
    public bool ShowPaginationRow { get; set; }

    [Parameter]
    public IEnumerable<int> RowsPerPageOpts { get; set; }

    private IEnumerable<TItem> AllItems { get; set; }

    protected override void OnParametersSet()
    {
        AllItems = Items;
        Items = Items.Take(RowsPerPageOpts.First()).ToList();
        base.OnParametersSet();
    }
}
