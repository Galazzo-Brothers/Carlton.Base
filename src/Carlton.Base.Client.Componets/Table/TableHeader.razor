@namespace Carlton.Base.Components
@typeparam TItem


@foreach(var (heading, i) in Headings.WithIndex())
{
    <div class="@HeaderRowItemCss(i)" @onclick="()=>HeaderRowItemClick(i)">
        <span class="heading-text">@heading.DisplayName</span>
        <div class="sort-arrows">
            <span class="arrow-ascending mdi mdi-arrow-up"></span>
            <span class="arrow-descending mdi mdi-arrow-down"></span>
        </div>
    </div>
}


@code {
    [Parameter]
    public IEnumerable<TableHeadingItem> Headings { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public EventCallback<IList<TItem>> OnItemsOrdered { get; set; }

    private bool ReOrderingInProgress { get; set; } = false;
    private int SelectedIndex { get; set; } = -1;
    private bool IsAscending = true;

    protected async override Task OnParametersSetAsync()
    {
        var initialState = SelectedIndex == -1;
        var requiresReOrdering = !initialState && !ReOrderingInProgress;

        if(requiresReOrdering)
        {
            ReOrderingInProgress = true;
            await OrderItems();
        }
        else
        {
            ReOrderingInProgress = false;
        }

        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        return base.ShouldRender() && !ReOrderingInProgress;
    }

    private string HeaderRowItemCss(int index)
    {
        return new CssBuilder("header-row-item")
                .AddClass("row-item")
                .AddClass("selected", SelectedIndex == index)
                .AddClass("ascending", IsAscending)
                .AddClass("descending", !IsAscending)
                .Build();
    }

    private async Task HeaderRowItemClick(int index)
    {
        IsAscending = (SelectedIndex == index) ? !IsAscending : true;
        SelectedIndex = index;
        await OrderItems();
    }

    private async Task OrderItems()
    {
        if(SelectedIndex == -1)
            return;

        var orderString = $"{Headings.ElementAt(SelectedIndex).OrderColumn}{(IsAscending ? string.Empty : " desc")}";
        var orderedItems = Items.AsQueryable().OrderBy(orderString).ToList();
        await OnItemsOrdered.InvokeAsync(orderedItems);
    }
}
