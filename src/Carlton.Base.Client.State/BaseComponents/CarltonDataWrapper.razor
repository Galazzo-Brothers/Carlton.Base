@namespace Carlton.Base.State
@implements IDisposable
@typeparam TViewModel
@typeparam TStateEvents where TStateEvents : Enum
@ChildComponent(Context)

@code {
    [Parameter]
    public RenderFragment<CarltonDataWrapperContext<TViewModel>> ChildComponent { get; set; }

    [Inject]
    private IViewModelRequest<TViewModel> ViewModelRequest { get; set; }

    [Inject]
    private IComponentEventRequestFactory Factory { get; set; }

    [Inject]
    private IMediator Mediatr { get; set; }

    [Inject]
    private ICarltonStateStore<TStateEvents> State { get; set; }

    protected CarltonDataWrapperContext<TViewModel> Context { get; set; }
        = new CarltonDataWrapperContext<TViewModel>(default(TViewModel), (sender, obj) => Task.CompletedTask);

    private IEnumerable<TStateEvents> StateEvents { get; set; } = new List<TStateEvents> { };

    protected async override Task OnInitializedAsync()
    {
        //Register State Changed Handler
        State.StateChanged += OnStateChanged;

        //Get VM and initalize context for wrapped component
        var vm = await GetViewModel();

        //Establish the context hooks for the child component
        Context = new CarltonDataWrapperContext<TViewModel>(vm, async (sender, evt) => await OnComponentEvent(sender, evt));

        //Gather the StateEvents, this component should be listening for, from the attributes on the ViewModelRequest object
        var attributes = (IEnumerable<ObserveStateEventsAttribute<TStateEvents>>) ViewModelRequest.GetType().GetCustomAttributes(typeof(ObserveStateEventsAttribute<TStateEvents>));
        StateEvents = attributes.SelectMany(_ => _.StateEventes);

        //Continue initilization
        await base.OnInitializedAsync();
    }

    protected async Task<TViewModel> GetViewModel()
    {
        return await Mediatr.Send(ViewModelRequest);
    }

    private async Task OnComponentEvent<TComponentEvent>(ICarltonComponent<TViewModel> sender, TComponentEvent evt)
        where TComponentEvent : IComponentEvent<TViewModel>
    {
        var request = Factory.CreateRequest(sender, evt);
        await Mediatr.Send(request);
    }

    private async Task OnStateChanged(object sender, TStateEvents stateEvent)
    {
        if(!StateEvents.Contains(stateEvent))
            return;

        Context.ViewModel = await GetViewModel();
        StateHasChanged();
    }

    public void Dispose()
    {
        State.StateChanged -= OnStateChanged;
    }
}