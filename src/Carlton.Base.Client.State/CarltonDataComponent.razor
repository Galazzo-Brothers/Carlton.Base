@namespace Carlton.Base.State
@typeparam TViewModel


<CarltonDataWrapper TViewModel="TViewModel">
    <ChildComponent>
        <DynamicComponent Type="DynamicComponentType" Parameters="DynamicComponentParameters(context)" />
    </ChildComponent>
</CarltonDataWrapper>

@code {
    [Inject]
    private ICarltonStateFactory factory { get; set; }

    private delegate Task ComponentEventDel(object evt);

    private Type DynamicComponentType
    {
        get
        {
            return factory.GetComponentType<TViewModel>();
        }
    }

    private Dictionary<string, object> DynamicComponentParameters(CarltonDataWrapperContext<TViewModel> context)
    {
        var del = new ComponentEventDel(context.OnComponentEvent);
        var eventCallback = new EventCallback(this, del);

        return new Dictionary<string, object>
            {
                {"ViewModel", context.ViewModel},
                {"OnComponentEvent", eventCallback}
            };
    }
}

