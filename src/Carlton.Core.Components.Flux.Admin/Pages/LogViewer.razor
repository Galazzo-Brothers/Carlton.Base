@using Carlton.Core.Components.Flux.Admin.Components.Logging
@using Carlton.Core.Components.Flux.Contracts;
@using Carlton.Core.Components.Library
@using Carlton.Core.Utilities.Logging;
@using Blazored.LocalStorage;
@using Carlton.Core.Components.Flux.Admin.Components.Logging.EventLogging;
@using Microsoft.Extensions.Logging;
@namespace Carlton.Core.Components.Flux.Admin
@implements IDisposable
@inject IBrowserStorageService BrowserStorage
@page "/admin/logs"

@if (IsLoading)
{
    <Spinner/>
}
else
{
    <div class="log-viewer">
        <div class="log-filters">
            <LogLevelFilter LogLevel="LogLevel.Trace" LogLevelIncluded="FilterIsActive(LogLevel.Trace)" Count="GetCountByLevel(LogLevel.Trace)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Trace, isIncluded)" />
            <LogLevelFilter LogLevel="LogLevel.Debug" LogLevelIncluded="FilterIsActive(LogLevel.Debug)" Count="GetCountByLevel(LogLevel.Debug)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Debug, isIncluded)" />
            <LogLevelFilter LogLevel="LogLevel.Information" LogLevelIncluded="FilterIsActive(LogLevel.Information)" Count="GetCountByLevel(LogLevel.Information)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Information, isIncluded)" />
            <LogLevelFilter LogLevel="LogLevel.Warning" LogLevelIncluded="FilterIsActive(LogLevel.Warning)" Count="GetCountByLevel(LogLevel.Warning)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Warning, isIncluded)" />
            <LogLevelFilter LogLevel="LogLevel.Error" LogLevelIncluded="FilterIsActive(LogLevel.Error)" Count="GetCountByLevel(LogLevel.Error)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Error, isIncluded)" />
            <LogLevelFilter LogLevel="LogLevel.Critical" LogLevelIncluded="FilterIsActive(LogLevel.Critical)" Count="GetCountByLevel(LogLevel.Critical)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Critical, isIncluded)" />
            <LogTextFilter OnTextChanged="OnFilterTextChanges" />
        </div>

        <LogTable LogMessages="FilteredLogMessages" />
    </div>
}


@code {
    private bool IsLoading { get; set; } = true;

    private IList<LogLevel> includedLogLevels = new List<LogLevel>();
    private string filterText = string.Empty;

    private IList<IndexDBLogMessage> AllLogMessages { get; set; } = new List<IndexDBLogMessage>();
    private IEnumerable<IndexDBLogMessage> FilteredLogMessages
    {
        get => AllLogMessages.Where(_ => includedLogLevels.Contains(_.LogLevel))
                             .Where(_ => _.Message.ToLower().Contains(filterText))
                             .OrderByDescending(_ => _.Timestamp);
    }

    protected async override Task OnInitializedAsync()
    {
        AllLogMessages = (await BrowserStorage.GetLogs(DateTime.Now)).ToList();
        includedLogLevels = new List<LogLevel> { LogLevel.Trace, LogLevel.Debug, LogLevel.Information, LogLevel.Warning, LogLevel.Error, LogLevel.Critical };
        IsLoading = false;
        BrowserStorage.LogsCleared += LogsCleared;
        await base.OnInitializedAsync();
    }

    private bool FilterIsActive(LogLevel logLevel)
        => includedLogLevels.Contains(logLevel);

    private int GetCountByLevel(LogLevel logLevel)
        => AllLogMessages.Count(_ => _.LogLevel == logLevel);

    private void OnFilterTextChanges(string newFilterText)
        => filterText = newFilterText.ToLower();

    private void LogLevelIncludesChanged(LogLevel logLevel, bool isIncluded)
    {
        if (isIncluded)
            includedLogLevels.Add(logLevel);
        else
            includedLogLevels.Remove(logLevel);
    }

    private void LogsCleared()
    {
        AllLogMessages.Clear();
        StateHasChanged();
    }

    public void Dispose()
    {
        BrowserStorage.LogsCleared -= LogsCleared;
    }
}

