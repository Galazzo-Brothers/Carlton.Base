@using Carlton.Core.Components.Flux.Admin.Components.Logging
@using Carlton.Core.Components.Flux.Contracts;
@using Carlton.Core.Components.Library
@using Carlton.Core.Utilities.Logging;
@using Blazored.LocalStorage;
@using Carlton.Core.Components.Flux.Admin.Components;
@using Microsoft.Extensions.Logging;
@using Carlton.Core.Components.Flux.Admin.Components.Logging.TraceLogging
@namespace Carlton.Core.Components.Flux.Admin
@implements IDisposable
@inject IBrowserStorageService BrowserStorage
@page "/admin/trace"

@if (IsLoading)
{
    <Spinner />
}
else
{
    <div class="trace-log-viewer">
        <TraceLogTable LogMessages="LogMessages" />
    </div>
}


@code {
    private bool IsLoading { get; set; } = true;

    private IList<LogMessage> LogMessages { get; set; } = new List<LogMessage>();


    protected async override Task OnInitializedAsync()
    {
        await BrowserStorage.CommitLogs();
        LogMessages = (await BrowserStorage.GetLogs(DateTime.Now)).ToList();
        IsLoading = false;
        BrowserStorage.LogsCleared += LogsCleared;
        await base.OnInitializedAsync();
    }

    private void LogsCleared()
    {
        LogMessages.Clear();
        StateHasChanged();
    }

    public void Dispose()
    {
        BrowserStorage.LogsCleared -= LogsCleared;
    }
}

