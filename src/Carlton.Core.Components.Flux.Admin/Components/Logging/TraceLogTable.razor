@using Carlton.Core.Utilities.Logging;

<div class="log-table">
    <Table Headings="Headings" Items="GroupedMessages" ShowPaginationRow="true" RowsPerPageOpts="RowsPerPageInts" SortableHeadersEnabled="false">
        <RowTemplate Context="group">
            <TraceLogTableExpandableRow GroupedLogs="group" />
        </RowTemplate>
    </Table>
</div>

@code {
    [Parameter]
    public IEnumerable<LogMessage> LogMessages { get; set; } = new List<LogMessage>();

    private IEnumerable<GroupedLogMessage> GroupedMessages { get; set; } = new List<GroupedLogMessage>();

    protected override void OnParametersSet()
    {
        InitGroupedMessages();
        base.OnParametersSet();
    }

    private IEnumerable<TableHeadingItem> Headings
    {
        get => new List<TableHeadingItem>
        {
            new TableHeadingItem("Timestamp"),
            new TableHeadingItem("Message"),
            new TableHeadingItem("Log Level", "Log Level"),
            new TableHeadingItem("Event ID", "EventId"),
            new TableHeadingItem("Event Name", "EventName"),
        };
    }

    private IEnumerable<int> RowsPerPageInts = new List<int>
    {
        5, 10, 25
    };

    private void InitGroupedMessages()
    {
        var orderedMessages = LogMessages.ToList().GroupBy(_ => _.Scopes.Split("=>")?.Last().Trim()).ToList();

        GroupedMessages =
            LogMessages.GroupBy(_ => _.Scopes.Split("=>")?.Last().Trim())
                       .Select(group =>
                            {
                                var orderedMessages = group.OrderBy(_ => _.Timestamp).ToList();
                                var orderedChildren = new List<LogMessage>(orderedMessages);
                                orderedMessages.RemoveAt(0);
                                orderedMessages.RemoveAt(orderedMessages.Count - 1);
                                return new GroupedLogMessage
                                    {
                                        StartingMessage = orderedMessages.First(),
                                        EndingMessage = orderedMessages.Last(),
                                        ChildMessages = orderedChildren
                                    };
                            }).ToList();
    }
}
