@namespace Carlton.Base.TestBed
@implements IAsyncDisposable
@inherits CarltonComponentBase<SourceViewerViewModel>
@inject IJSRuntime JSRuntime
@inject HttpClient client

<div class="row">
    <div class="col-12 test-component-output-source">
        @((MarkupString) OutputMarkup)
    </div>
</div>

@code{
    private const string CODE_BLOCK_TEMPLATE = "<pre><code class='{0}'></code></pre>";
    private const string PROJECT_NAME = "Carlton.Base.TestBedFramework";
    private IJSObjectReference _module;

    private string OutputMarkup { get; set; } = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", $"./_content/{PROJECT_NAME}/Components/SourceViewer/sourceViewer.razor.js");
        await base.OnInitializedAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        //Set the Output Markup
        OutputMarkup = string.Format(CODE_BLOCK_TEMPLATE, "html");

        await base.OnParametersSetAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(_module == null)
            throw new InvalidOperationException();

        await _module.InvokeAsync<Task>("postRender", ViewModel.ComponentSource);
        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
    {
        if(_module == null)
            throw new InvalidOperationException();

        await _module.DisposeAsync();
    }
}