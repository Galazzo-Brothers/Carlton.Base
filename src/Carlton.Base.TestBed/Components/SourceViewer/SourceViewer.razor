@namespace Carlton.Base.TestBed
@implements IAsyncDisposable
@inherits CarltonComponentBase<SourceViewerViewModel>
@inject IJSRuntime JSRuntime
@inject HttpClient client

<div class="row">
    <div class="col-12 test-component-output-source">
        @((MarkupString)OutputMarkup)
    </div>
</div>

@code {
    public const string GetOutputSource = "getOutputSource";
    public const string PostRender = "postRender";

    private const string CodeBlockTemplate = "<pre><code class='{0}'></code></pre>";
    private const string HTML = "html";

    private IJSObjectReference _module;
    private string OutputMarkup { get; set; } = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        var projectName = Assembly.GetExecutingAssembly().GetName().Name;
        _module = await JSRuntime.InvokeAsync<IJSObjectReference>(JavaScriptHelper.Import, JavaScriptHelper.GetImportPath(nameof(SourceViewer)));
        await base.OnInitializedAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        //Set the Output Markup
        OutputMarkup = string.Format(CodeBlockTemplate, HTML);
        await base.OnParametersSetAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(_module != null && ViewModel != null)
            await _module.InvokeAsync<Task>(PostRender, ViewModel.ComponentSource);

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
    {
        if(_module == null)
            throw new InvalidOperationException();

        await _module.DisposeAsync();
    }
}