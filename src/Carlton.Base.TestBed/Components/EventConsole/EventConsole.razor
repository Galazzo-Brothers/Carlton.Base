@namespace Carlton.Base.TestBed
@attribute [DataEndpointRefreshPolicy(DataEndpointRefreshPolicy.Never)]
@attribute [ObserveStateEvents<TestBedStateEvents>(TestBedStateEvents.ComponentEventRecorded)]
@attribute [ObserveStateEvents<TestBedStateEvents>(TestBedStateEvents.ComponentEventsCleared)]


@inherits DataComponentBase<EventConsoleViewModel>

<div class="event-console">
    <Console IsReadOnly="true" Text="@ConsoleText" />
    <FloatingActionButton Icon="delete" PositionRight="3" PositionBottom="5" OnClickCallback="OnClick" />
</div>


@code {
    private string ConsoleText { get; set; } = string.Empty;
    protected override void OnParametersSet()
    {
        ConsoleText = string.Empty;
        foreach(var evt in ViewModel.RecordedEvents)
        {
            ConsoleText += Environment.NewLine;
            ConsoleText += $"{evt.Name}: {JsonSerializer.Serialize(evt.EventObj)}";
        }

        base.OnParametersSet();
    }

    private async Task OnClick()
    {
        await base.OnComponentEvent.InvokeAsync(new EventsClearedCommand());
    }
}

