@namespace Carlton.Base.TestBedFramework


@inherits CarltonComponentBase<ComponentViewerViewModel>

<span class="component-viewer">
    @TestComponentFragment
</span>

@code {
    private RenderFragment TestComponentFragment { get; set; }

    protected override void OnParametersSet()
    {
        var componentType = ViewModel.ComponentType;

        if(!(typeof(ComponentBase).IsAssignableFrom(componentType)))
            throw new InvalidOperationException($"{componentType} is not a valid component type.");

        TestComponentFragment = builder =>
        {
            builder.OpenElement(0, "div");
            builder.OpenComponent(1, ViewModel.ComponentType);

            Func<object, Task> wrappedCallback = async (evt) => await base.OnComponentEvent.InvokeAsync(new ComponentViewerAddEvent(evt));
            EventCallback eventCallback = EventCallback.Factory.Create(this, wrappedCallback);

            if(ViewModel.IsCarltonComponent)
            {
                builder.AddAttribute(1, "ViewModel", base.ViewModel.ComponentViewModel);
                builder.AddAttribute(3, "OnComponentEvent", eventCallback);
            }
            else
            {
                var i = 1;
                var componentParameters = (IDictionary<string, object>)ViewModel.ComponentViewModel;
                foreach(var key in componentParameters.Keys)
                {
                    builder.AddAttribute(i, key, componentParameters[key]);
                    i++;
                }
            }

            builder.CloseComponent();
            builder.CloseElement();
        };
    }
}



