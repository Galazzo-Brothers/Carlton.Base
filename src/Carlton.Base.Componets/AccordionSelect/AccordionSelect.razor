@namespace Carlton.Base.Components
@typeparam TValue

<div class="accordion-select">
    <div class="content">
        <div class="@AccordionHeaderCssClass" @onclick="() => IsExpanded = !IsExpanded">
            <span class="@AccordionIconBtnCssClass"></span>
            <span class="item-group-name">
                @Title
            </span>
        </div>
        <div class="@ItemContainerCssClass">
            @foreach(var item in Items)
            {
                <div class="@ItemCss(item.Value)" @onclick="() => OnItemSelected(item)">
                    <span class="@ItemIconCss"></span>
                    <span class="item-name">
                        @item.Name
                    </span>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public IEnumerable<SelectItem<TValue>> Items { get; set; } = new List<SelectItem<TValue>>();

    [Parameter]
    public TValue SelectedValue { get; set; }

    [Parameter]
    public bool IsExpanded { get; set; }

    [Parameter]
    public EventCallback<SelectItem<TValue>> SelectedItemChanged { get; set; }

    private string AccordionHeaderCssClass
    {
        get => new CssBuilder("accordion-header")
                .AddClass("selected", ValueExists(SelectedValue))
                .Build();
    }

    private string AccordionIconBtnCssClass
    {
        get => new CssBuilder("accordion-icon-btn")
                 .AddClass("mdi mdi-icon mdi-24px")
                 .AddClass("mdi-minus-box-outline", IsExpanded)
                 .AddClass("mdi-plus-box-outline", !IsExpanded)
                 .Build();
    }

    private string ItemContainerCssClass
    {
        get => new CssBuilder("item-container")
                 .AddClass("collapsed", !IsExpanded)
                 .Build();
    }

    private Func<TValue, string> ItemCss
    {
        get => (value) => new CssBuilder("item")
            .AddClass("selected", value.Equals(SelectedValue))
            .Build();
    }

    private string ItemIconCss
    {
        get => new CssBuilder("icon")
               .AddClass("mdi mdi-icon mdi-12px mdi-bookmark")
               .Build();
    }

    private bool ValueExists(TValue value)
    {
        return Items.Any(_ => _.Value.Equals(value));
    }

    private async Task OnItemSelected(SelectItem<TValue> item)
    {
        SelectedValue = item.Value;
        await SelectedItemChanged.InvokeAsync(item);
    }
}