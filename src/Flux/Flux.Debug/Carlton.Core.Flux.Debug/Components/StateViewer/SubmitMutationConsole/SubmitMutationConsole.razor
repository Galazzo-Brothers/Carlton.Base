@using Carlton.Core.Components.Buttons
@using Carlton.Core.Components.Consoles
@using Carlton.Core.Components.Dropdowns
@using Carlton.Core.Utilities.Extensions
@namespace Carlton.Core.Flux.Debug.Components.StateViewer.SubmitMutationConsole


@* This component is for ad hoc adding new mutations to the flux state. *@
<div class="new-mutation-console">
	<div class="mutation-type-selection">
		<span class="mutation-type-label">Mutation Command:</span>
		<Dropdown T="Type"
				  Options="MutationTypes.ToDictionary(x => x.GetDisplayName(), x => x)"
				  OnValueChange="HandleDropdownValueChange" />
	</div>
	<JsonViewerConsole Object="NewMutationCommand"
					   IsReadOnly="false"
					   OnValueChange="HandleConsoleValueChange" />

	<div class="action-btn">
		<IconButton Icon="content-save"
					IsDisabled="!CanSubmit"
					OnClick="HandleClick" />
	</div>
</div>

@code {
	/// <summary>
	/// Gets or sets the collection of mutation command types that can be selected.
	/// </summary>
	[Parameter]
	public IEnumerable<Type> MutationTypes { get; set; }

	/// <summary>
	/// Gets or sets the index of the currently selected mutation type.
	/// </summary>
	[Parameter]
	public int SelectedIndex { get; set; }

	/// <summary>
	/// Event callback that is invoked when the selected mutation type changes.
	/// </summary>
	[Parameter]
	public EventCallback<int> OnMutationSelectionChange { get; set; }

	/// <summary>
	/// Event callback that is invoked when a mutation is submitted.
	/// </summary>
	[Parameter]
	public EventCallback<SubmitMutationArgs> OnMutationSubmit { get; set; }

	private bool CanSubmit { get; set; } = true;

	private object NewMutationCommand { get; set; } = new object();

	private Type SelectedMutationType => MutationTypes.ElementAt(SelectedIndex);

	protected override void OnParametersSet()
	{
		NewMutationCommand = Activator.CreateInstance(SelectedMutationType);
		base.OnParametersSet();
	}

	private async Task HandleDropdownValueChange(ValueChangeArgs<Type> args)
	{
		await OnMutationSelectionChange.InvokeAsync(args.SelectedIndex);
	}

	private void HandleConsoleValueChange(JsonViewerConsoleValue value)
	{
		CanSubmit = value.IsValid;

		if (value.IsValid)
			NewMutationCommand = value.Value;
	}

	private async Task HandleClick()
	{
		await OnMutationSubmit.InvokeAsync(new SubmitMutationArgs(NewMutationCommand));
	}
}