@namespace Carlton.Core.Flux.Debug.Components.StateViewer
@using Carlton.Core.Components.Buttons

@* Component for displaying a table of recorded mutations with options to select mutations and playback the FluxState. *@
<Table TItem="RecordedMutation"
	   Headings="@Headings"
	   Items="RecordedMutations"
	   ZebraStripped="true"
	   SortableHeadersEnabled="false"
	   ShowPaginationRow="false">
	<RowTemplate Context="item">
		<div class="@(TableRowCss(item.MutationIndex))">
			<div class="table-cell selected"><span class="cell-text">@item.MutationIndex</span></div>
			<div class="table-cell"><span class="cell-text">@item.MutationDate.ToString("MM/dd/yyyy HH:mm:ss.fffffff")</span></div>
			<div class="table-cell"><span class="cell-text">@item.MutationName</span></div>
			<div class="table-cell"><span class="cell-text">false</span></div>
			<div class="table-cell"><span class="cell-text"><LinkButton Text="Select" OnClick="async () => await OnRecordedMutationSelected.InvokeAsync(new SelectedMutationCommandChangedArgs(item.MutationIndex))" /></span></div>
		</div>
	</RowTemplate>
</Table>

@code {
	/// <summary>
	/// Gets or sets the collection of recorded mutations.
	/// </summary>
	[Parameter]
	public IEnumerable<RecordedMutation> RecordedMutations { get; set; }

	/// <summary>
	/// Gets or sets the index of the selected mutation.
	/// </summary>
	[Parameter]
	public int SelectedMutationIndex { get; set; }

	/// <summary>
	/// Event callback invoked when a recorded mutation is selected.
	/// </summary>
	[Parameter]
	public EventCallback<SelectedMutationCommandChangedArgs> OnRecordedMutationSelected { get; set; }

	private IEnumerable<TableHeadingItem> Headings = new List<TableHeadingItem>
	{
		new TableHeadingItem("Id"),
		new TableHeadingItem("Timestamp"),
		new TableHeadingItem("Mutation"),
		new TableHeadingItem("Remote Server Called"),
		new TableHeadingItem("Select Mutation")
	};

	private string TableRowCss(int index) =>
		new CssBuilder("table-row")
		.AddClass("selected", SelectedMutationIndex == index)
		.Build();
}