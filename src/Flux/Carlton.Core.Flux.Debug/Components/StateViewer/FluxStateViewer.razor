@using Carlton.Core.Components.Buttons
@using Carlton.Core.Components.Consoles
@using Carlton.Core.Components.Toggles
@using Carlton.Core.Foundation.Web.ViewState
@namespace Carlton.Core.Flux.Debug.Components.StateViewer
@inject IViewStateService<ToggleSelectOption> ViewStateService

@*
	This component displays the Flux state using a JSON viewer console.
    The Flux state is provided by the ViewModel.FluxState property.
*@
<div class="flux-state-viewer">
	<span class="selected-mutation-label">Selected State: @SelectedRowLabel</span>
	<ToggleSelect TValue="int"
				  FirstOption="FirstKvp"
				  SecondOption="SecondKvp"
				  SelectedOption="ViewStateService.ViewState"
				  OnOptionChange="OnToggleChange" />

	@if (SelectedToggleOption == ToggleSelectOption.FirstOption)
	{
		<JsonViewerConsole IsReadOnly="true" Obj="SelectedFluxState" />
	}
	else
	{
		<FluxStateViewerTable RecordedMutations="RecordedMutations"
							  SelectedMutationIndex="SelectedMutationIndex"
							  OnRecordedMutationSelected="OnRecordedMutationSelected" />

	}
</div>

@code {
	private static KeyValuePair<string, int> FirstKvp = new KeyValuePair<string, int>("JSON State", 1);
	private static KeyValuePair<string, int> SecondKvp = new KeyValuePair<string, int>("Audit Table", 2);

	/// <summary>
	/// Gets or sets the recorded mutations.
	/// </summary>
	[Parameter]
	public IEnumerable<RecordedMutation> RecordedMutations { get; set; }

	/// <summary>
	/// Gets or sets the index of the selected mutation.
	/// </summary>
	[Parameter]
	public int SelectedMutationIndex { get; set; }

	/// <summary>
	/// Gets or sets the selected Flux state.
	/// </summary>
	[Parameter]
	public object SelectedFluxState { get; set; }

	/// <summary>
	/// Event callback invoked when a recorded mutation is selected.
	/// </summary>
	[Parameter]
	public EventCallback<SelectedMutationCommandChangedArgs> OnRecordedMutationSelected { get; set; }

	private ToggleSelectOption SelectedToggleOption { get; set; } = ToggleSelectOption.FirstOption;
	private string SelectedRowLabel => SelectedMutationIndex == 1 ? "Initial State" : $"Mutation {SelectedMutationIndex + 1}";

	protected override void OnInitialized()
	{
		if (ViewStateService.ViewState == 0)
			ViewStateService.UpdateViewState(ToggleSelectOption.FirstOption);

		SelectedToggleOption = ViewStateService.ViewState;
		base.OnInitialized();
	}

	private void OnToggleChange()
	{
		if (SelectedToggleOption == ToggleSelectOption.FirstOption)
			SelectedToggleOption = ToggleSelectOption.SecondOption;
		else
			SelectedToggleOption = ToggleSelectOption.FirstOption;

		ViewStateService.UpdateViewState(SelectedToggleOption);
	}
}