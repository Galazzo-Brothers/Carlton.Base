@using Carlton.Core.Components
@using Carlton.Core.Components.Dropdowns
@using Carlton.Core.Components.Layouts
@using Carlton.Core.Components.Layouts.State.Modals
@using Carlton.Core.Components.Layouts.State.Theme
@using Carlton.Core.Components.Layouts.State.Toasts
@using Carlton.Core.Components.Modals
@using Carlton.Core.Flux.Debug.Layouts
@using Carlton.Core.Flux.Debug.Storage
@using Carlton.Core.Layouts.Components.Notifications
@namespace Carlton.Core.Flux.Debug.Components
@inherits BaseConnectedComponent<HeaderActionsViewModel>
@inject ILogsDataAccess LogsDataAccess
@inject IThemeState ThemeState
@inject IModalState ModalState
@inject NavigationManager NavigationManager
@inject IToastState ToastState

<FluxDebugHeaderActions 
       UserName="@ViewModel.UserName"
       AvatarUrl="@ViewModel.AvatarUrl"
       DropdownMenuItems="DropdownMenuItems"/>


@code {
    private IEnumerable<DropdownMenuItem<int>> DropdownMenuItems
    {
        get =>
            new List<DropdownMenuItem<int>>
            {
                new DropdownMenuItem<int>("Profile", 1, "account", 1, () => { }),
                new DropdownMenuItem<int>("Theme", 2, "theme-light-dark", 2, ThemeState.ToggleTheme),
                new DropdownMenuItem<int>("Clear Localstorage", 3, "delete", 3, RaiseClearLocalStorageConfirmationModal),
                new DropdownMenuItem<int>("App", 4, "open-in-app", 4, () => NavigationManager.NavigateTo($"/")),
                new DropdownMenuItem<int>("Logout", 5, "logout", 5, () => { })
            };

    }

    private void RaiseClearLocalStorageConfirmationModal()
        => ModalState.RaiseModal(ModalTypes.ConfirmationModal,
            new ModalViewModel
            {
               ModalPrompt = "Are you sure",
               ModalMessage = "Are you sure you want to clear the local storage logs?",
               CloseModal = ClearLocalStorageConfirmed,
               DismissModal = null
            });


    private async Task ClearLocalStorageConfirmed(object args)
    {
        //Cast the modal params
        var userConfirmed = (bool)args;

        //Check if user confirmed the action
        if (!userConfirmed)
            return;

        //Clear localstorage
        await LogsDataAccess.ClearLogs();

        //Notify the user via a toast
        ToastState.RaiseToast("Success", "Localstorage has been cleared.", Core.Components.Toasts.ToastTypes.Success);

        //Update the in memory state store to reflect the action
        await base.OnComponentEvent.InvokeAsync(new LogsClearedCommand());
    }
}