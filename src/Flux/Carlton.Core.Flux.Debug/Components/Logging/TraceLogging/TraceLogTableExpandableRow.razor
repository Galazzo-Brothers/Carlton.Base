@using BlazorComponentUtilities
@using Carlton.Core.Components.Button
@using Carlton.Core.Flux.Debug.Components.Logging
@namespace Carlton.Core.Flux.Debug.Components.Logging.TraceLogging


<div class="@TableRowCss">
    <div class="table-cell chevron-cell"><span class="@ChevronCss" @onclick="ChevronClick"></span></div>
    <div class="table-cell"><span class="cell-text">@TraceLogMessageGroup.ParentEntry.Timestamp.ToString("MM/dd/yyyy HH:mm:ss.fffffff")</span></div>
    <div class="table-cell"><span class="cell-text">@TraceLogMessageGroup.ParentEntry.FluxAction</span></div>
    <div class="table-cell"><span class="cell-text">@TraceLogMessageGroup.ParentEntry.TypeDisplayName</span></div>
    <div class="table-cell"><span class="cell-text">@TraceLogMessageGroup.ParentEntry.EventId.Id</span></div>
    <div class="table-cell"><span class="cell-text"><TraceLoggingOutcomePill RequestSucceeded="@TraceLogMessageGroup.ParentEntry.RequestSucceeded" /></span></div>
    <div class="table-cell"><span class="cell-text"><AppLinkButton Text="View Details" OnClickCallback="() => OnSelectedLogMessageChanged.InvokeAsync(TraceLogMessageGroup.ParentEntry)" /></span></div>
</div>



@foreach (var child in TraceLogMessageGroup.ChildEntries)
{
    <div class="@ChildRowCss(child)">
        <div class="table-cell"></div>
        <div class="table-cell"><span class="cell-text">@child.Timestamp.ToString("MM/dd/yyyy HH:mm:ss.fffffff")</span></div>
        <div class="table-cell"><span class="cell-text">@child.FluxAction</span></div>
        <div class="table-cell"><span class="cell-text">@child.TypeDisplayName</span></div>
        <div class="table-cell"><span class="cell-text">@child.EventId.Id</span></div>
        <div class="table-cell"><span class="cell-text"><TraceLoggingOutcomePill RequestSucceeded="@child.RequestSucceeded" /></span></div>
        <div class="table-cell"><span class="cell-text"><AppLinkButton Text="View Details" OnClickCallback="() => OnSelectedLogMessageChanged.InvokeAsync(child)" /></span></div>
    </div>
}


@code {
    [Parameter]
    public required TraceLogMessageGroup TraceLogMessageGroup { get; set; }

    [Parameter]
    public TraceLogMessage? SelectedTraceLogMessage { get; set; }

    [Parameter]
    public EventCallback<TraceLogMessage> OnSelectedLogMessageChanged { get; set; }

    private bool Expanded { get; set; }
    private bool HasChildren { get => TraceLogMessageGroup.ChildEntries.Any(); }

    private string TableRowCss
    {
        get => new CssBuilder("starting-row")
                .AddClass("table-row")
                .AddClass("selected", TraceLogMessageGroup.ParentEntry == SelectedTraceLogMessage)
                .Build();
    }

    private string ChevronCss
    {
        get => new CssBuilder("chevron")
                    .AddClass("mdi")
                    .AddClass("mdi-24px")
                    .AddClass("mdi-chevron-down", Expanded)
                    .AddClass("mdi-chevron-right", !Expanded)
                    .AddClass("dimmed", !HasChildren)
                    .Build();

    }

    private string ChildRowCss(TraceLogMessage traceLogMessage)
        => new CssBuilder("child-row")
                .AddClass("table-row")
                .AddClass("selected", SelectedTraceLogMessage == traceLogMessage)
                .AddClass("collapased", !Expanded)
                .Build();
    

    private void ChevronClick()
    {
        if (HasChildren)
            Expanded = !Expanded;
    }
}
