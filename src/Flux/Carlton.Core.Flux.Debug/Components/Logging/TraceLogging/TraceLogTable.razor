@using Carlton.Core.Components.Table
@namespace Carlton.Core.Flux.Debug.Components.Logging.TraceLogging

<div class="log-table">
    <Table Headings="Headings" Items="GroupedLogMessages" ShowPaginationRow="true" RowsPerPageOpts="RowsPerPageInts" SortableHeadersEnabled="false">
        <RowTemplate Context="group">
            <TraceLogTableExpandableRow LogEntryGroup="group" />
        </RowTemplate>
    </Table>
</div>

@code {
    [Parameter]
    public IEnumerable<LogMessage> LogMessages { get; set; } = new List<LogMessage>();

    private IEnumerable<LogMessageGroup> GroupedLogMessages { get; set; } = new List<LogMessageGroup>();

    protected override void OnParametersSet()
    {
        InitGroupedMessages();
        base.OnParametersSet();
    }

    private IEnumerable<TableHeadingItem> Headings
    {
        get => new List<TableHeadingItem>
        {
            new TableHeadingItem("Timestamp"),
            new TableHeadingItem("Message"),
            new TableHeadingItem("Log Level", "Log Level"),
            new TableHeadingItem("Event ID", "EventId"),
            new TableHeadingItem("Event Name", "EventName"),
        };
    }

    private IEnumerable<int> RowsPerPageInts = new List<int>
    {
        5, 10, 25
    };

    private void InitGroupedMessages()
    {
        GroupedLogMessages =
            LogMessages
                    .Where(IsFluxActionPredicate)
                    .GroupBy(logs => logs.Scopes
                                         .First(Kvp => Kvp.Key == "FluxRequestId")
                                         .Value.ToString())
                    .Select(group =>
                    {
                        var parentEntry = group.Last();
                        var orderedMessages = group.ToList();
                        orderedMessages.RemoveAt(orderedMessages.Count - 1);
                        var orderedChildren = new List<LogMessage>(orderedMessages);
                        return new LogMessageGroup
                            {
                                ParentEntry = parentEntry,
                                ChildEntries = orderedChildren
                            };
                    }).ToList();

        bool IsFluxActionPredicate(LogMessage log) => log.Scopes.Any(kvp => kvp.Key == "FluxAction");
    }
}
