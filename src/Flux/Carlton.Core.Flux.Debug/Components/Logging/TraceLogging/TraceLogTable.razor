@using Carlton.Core.Components.Table
@namespace Carlton.Core.Flux.Debug.Components.Logging.TraceLogging

<div class="log-table">
    <Table Headings="Headings" Items="GroupedEntries" ShowPaginationRow="true" RowsPerPageOpts="RowsPerPageInts" SortableHeadersEnabled="false">
        <RowTemplate Context="group">
            <TraceLogTableExpandableRow LogEntryGroup="group" />
        </RowTemplate>
    </Table>
</div>

@code {
    [Parameter]
    public IEnumerable<LogEntry> LogEntries { get; set; } = new List<LogEntry>();

    private IEnumerable<LogEntryGroup> GroupedEntries { get; set; } = new List<LogEntryGroup>();

    protected override void OnParametersSet()
    {
        InitGroupedMessages();
        base.OnParametersSet();
    }

    private IEnumerable<TableHeadingItem> Headings
    {
        get => new List<TableHeadingItem>
        {
            new TableHeadingItem("Timestamp"),
            new TableHeadingItem("Message"),
            new TableHeadingItem("Log Level", "Log Level"),
            new TableHeadingItem("Event ID", "EventId"),
            new TableHeadingItem("Event Name", "EventName"),
        };
    }

    private IEnumerable<int> RowsPerPageInts = new List<int>
    {
        5, 10, 25
    };

    private void InitGroupedMessages()
    {
        GroupedEntries =
            LogEntries
                       .GroupBy(_ => _.Scopes.Split("=>")?.Last()?.Trim())
                       .Where(_ => _.Count() > 1) //Ignore orphaned messages
                       .Select(group =>
                            {
                                var orderedMessages = group.ToList();
                                orderedMessages.RemoveAt(0);
                                orderedMessages.RemoveAt(orderedMessages.Count - 1);
                                var orderedChildren = new List<LogEntry>(orderedMessages);
                                return new LogEntryGroup
                                    {
                                        StartingEntry = group.First(),
                                        EndingEntry = group.Last(),
                                        ChildEntries = orderedChildren
                                    };
                            }).ToList();
    }
}
