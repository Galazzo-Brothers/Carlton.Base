@using Carlton.Core.Components.Table
@using Carlton.Core.Flux.Debug.Components.Logging.EventLogging
@using Carlton.Core.Flux.Debug.Extensions
@namespace Carlton.Core.Flux.Debug.Components.Logging.TraceLogging

<div class="trace-log-table">
    <Table Headings="Headings"
           Items="TraceLogMessageGroups"
        ShowPaginationRow="true"
        RowsPerPageOpts="RowsPerPageInts"
        SortableHeadersEnabled="false">
        <RowTemplate Context="group">
            <TraceLogTableExpandableRow
                TraceLogMessageGroup="group" 
                SelectedTraceLogMessage="SelectedTraceLogMessage"
                OnSelectedLogMessageChanged="OnSelectedTraceLogMessageChanged" />
        </RowTemplate>
    </Table>
</div>

@code {
    [Parameter]
    public IEnumerable<TraceLogMessageGroup> TraceLogMessageGroups { get; set; } = new List<TraceLogMessageGroup>();

    [Parameter]
    public EventCallback<SelectedTraceLogMessageChangedArgs> SelectedTraceLogMessageChanged { get; set; }

    private TraceLogMessage? SelectedTraceLogMessage { get; set; }

    private IEnumerable<TableHeadingItem> Headings
    {
        get => new List<TableHeadingItem>
        {
            new TableHeadingItem("Timestamp"),
            new TableHeadingItem("Flux Action", "FluxAction"),
            new TableHeadingItem("Flux Action Type", "TypeDisplayName"),
            new TableHeadingItem("Event Id", "EventId.Id"),
            new TableHeadingItem("Outcome", "FluxActionOutcome"),
            new TableHeadingItem("Details"),
        };
    }

    private IEnumerable<int> RowsPerPageInts = new List<int>
    {
        5, 10, 25
    };

    private void OnSelectedTraceLogMessageChanged(TraceLogMessage selectedTraceLogMessage)
    {
        SelectedTraceLogMessage = selectedTraceLogMessage;
        SelectedTraceLogMessageChanged.InvokeAsync(new SelectedTraceLogMessageChangedArgs(selectedTraceLogMessage));
    }
}
