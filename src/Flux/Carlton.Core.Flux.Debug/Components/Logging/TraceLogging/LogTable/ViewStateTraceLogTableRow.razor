@using Carlton.Core.Foundation.Web.ViewState
@namespace Carlton.Core.Flux.Debug.Components.Logging.TraceLogging.LogTable
@inherits TraceLogTableExpandableRow
@inject IViewStateService<TraceLogTableExpandedRowsState> ViewStateService

<TraceLogTableExpandableRow TraceLogMessageGroup="TraceLogMessageGroup"
							SelectedTraceLogMessageIndex="SelectedTraceLogMessageIndex"
							IsExpanded="IsRowExpanded"
							OnSelectedTraceLogMessageChanged="OnSelectedTraceLogMessageChanged"
							OnTraceLogMessageExpansionChanged="HandleTraceLogMessageExpansionChanged" />

@code {
	private bool IsRowExpanded => ViewStateService.ViewState.ExpandedRows.Contains(TraceLogMessageGroup.ParentEntry.Id);

	protected override void OnInitialized()
	{
		if (ViewStateService.ViewState == null)
			ViewStateService.UpdateViewState(new TraceLogTableExpandedRowsState());

		base.OnInitialized();
	}

	// Handles the event when the expansion state of a trace log message changes.
	private void HandleTraceLogMessageExpansionChanged(TraceLogMessageExpansionChangedArgs args)
	{
		if (args.IsExpanded)
			ViewStateService.ViewState.ExpandedRows.Add(args.TraceLogMessage.Id);
		else
			ViewStateService.ViewState.ExpandedRows.Remove(args.TraceLogMessage.Id);
;
		OnTraceLogMessageExpansionChanged.InvokeAsync(args);
	}
}
