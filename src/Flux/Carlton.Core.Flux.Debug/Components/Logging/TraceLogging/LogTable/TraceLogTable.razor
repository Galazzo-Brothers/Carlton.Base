@using Carlton.Core.Components.Tables
@using Carlton.Core.Flux.Debug.Components.Logging.EventLogging
@using Carlton.Core.Flux.Debug.Extensions
@using Carlton.Core.Foundation.State
@using Carlton.Core.Foundation.Web.ViewState
@using System.Collections
@namespace Carlton.Core.Flux.Debug.Components.Logging.TraceLogging.LogTable

@* Represents a table displaying trace log messages. *@
<div class="trace-log-table">
	<ViewStateTable Headings="Headings"
					Items="TraceLogMessageGroups"
					ShowPaginationRow="true"
					SortableHeadersEnabled="false"
					RowsPerPageOptions="RowsPerPageOptions"
					OnTableInteraction="OnTableInteraction"
					ItemsEqualityComparer="new TraceLogMessageGroupComparer()"
					ViewStateKey="@nameof(TraceLogTable)">
		<RowTemplate Context="group">
			<ViewStateTraceLogTableRow TraceLogMessageGroup="group"
									   SelectedTraceLogMessageIndex="SelectedTraceLogMessageIndex"
									   OnSelectedTraceLogMessageChanged="OnSelectedTraceLogMessageChanged"
									   OnTraceLogMessageExpansionChanged="OnTraceLogMessageExpansionChanged" />
		</RowTemplate>
	</ViewStateTable>
</div>


@code {
	/// <summary>
	/// Collection of trace log message groups to display.
	/// </summary>
	[Parameter]
	public IEnumerable<TraceLogMessageGroup> TraceLogMessageGroups { get; set; } = new List<TraceLogMessageGroup>();

	/// <summary>
	/// Gets or sets the selected trace log message.
	/// </summary>
	[Parameter]
	public int? SelectedTraceLogMessageIndex { get; set; }

	/// <summary>
	/// Event callback for when the selected trace log message changes.
	/// </summary>
	[Parameter]
	public EventCallback<SelectedTraceLogMessageChangedArgs> OnSelectedTraceLogMessageChanged { get; set; }

	/// <summary>
	/// Event callback for when the expansion state of a trace log message changes.
	/// </summary>
	[Parameter]
	public EventCallback<TraceLogMessageExpansionChangedArgs> OnTraceLogMessageExpansionChanged { get; set; }

	/// <summary>
	/// Event callback for when the table interaction state changes.
	/// </summary>
	[Parameter]
	public EventCallback<TableInteractionState> OnTableInteraction { get; set; }

	// Represents the header items for the trace log table.
	private IEnumerable<TableHeadingItem> Headings
	{
		get => new List<TableHeadingItem>
		{
			new TableHeadingItem(""), // Placeholder for expand/collapse button
            new TableHeadingItem("Timestamp"),
			new TableHeadingItem("Flux Action", "FluxAction"),
			new TableHeadingItem("Flux Action Type", "TypeDisplayName"),
			new TableHeadingItem("Event Id", "EventId.Id"),
			new TableHeadingItem("Outcome", "FluxActionOutcome"),
			new TableHeadingItem("Details"),
		};
	}

	private List<int> RowsPerPageOptions = new List<int> { 5, 10, 25 };
}



