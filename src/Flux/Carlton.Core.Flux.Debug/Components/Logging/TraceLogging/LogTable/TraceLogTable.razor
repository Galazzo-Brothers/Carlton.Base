@using Carlton.Core.Components.Tables
@using Carlton.Core.Flux.Debug.Components.Logging.EventLogging
@using Carlton.Core.Flux.Debug.Extensions
@using Carlton.Core.Foundation.State
@namespace Carlton.Core.Flux.Debug.Components.Logging.TraceLogging.LogTable

@* Represents a table displaying trace log messages. *@
<div class="trace-log-table">
	<ViewStateTable Headings="Headings"
		   Items="TraceLogMessageGroups"
		   ShowPaginationRow="true"
		   SortableHeadersEnabled="false"
		   RowsPerPageOpts="RowsPerPageOpts"
		   OnTableInteraction="OnTableInteraction"
		   ViewStateKey="@nameof(TraceLogTable)">
		<RowTemplate Context="group">
			<TraceLogTableExpandableRow TraceLogMessageGroup="group"
										SelectedTraceLogMessage="SelectedTraceLogMessage"
										IsExpanded="IsExpanded(group.ParentEntry)"
										OnSelectedTraceLogMessageChanged="HandleSelectedTraceLogMessageChanged"
										OnTraceLogMessageExpansionChanged="HandleTraceLogMessageExpansionChanged" />
		</RowTemplate>
	</ViewStateTable>
</div>


@code {
	/// <summary>
	/// Collection of trace log message groups to display.
	/// </summary>
	[Parameter]
	public IEnumerable<TraceLogMessageGroup> TraceLogMessageGroups { get; set; } = new List<TraceLogMessageGroup>();

	/// <summary>
	/// Index of the selected trace log message.
	/// </summary>
	[Parameter]
	public int SelectedTraceLogMessageIndex { get; set; }

	/// <summary>
	/// Collection of indexes of expanded rows.
	/// </summary>
	[Parameter]
	public required IEnumerable<int> ExpandedRowIndexes { get; set; }

	/// <summary>
	/// Event callback for when the selected trace log message changes.
	/// </summary>
	[Parameter]
	public EventCallback<SelectedTraceLogMessageChangedArgs> OnSelectedTraceLogMessageChanged { get; set; }

	/// <summary>
	/// Event callback for when the expansion state of a trace log message changes.
	/// </summary>
	[Parameter]
	public EventCallback<TraceLogMessageExpansionChangedArgs> OnTraceLogMessageExpansionChanged { get; set; }

	/// <summary>
	/// Event callback for when the table interaction state changes.
	/// </summary>
	[Parameter]
	public EventCallback<TableInteractionState> OnTableInteraction { get; set; }

	private TraceLogMessage SelectedTraceLogMessage => TraceLogMessageGroups.GetElementAtIndex(SelectedTraceLogMessageIndex);

	// Represents the header items for the trace log table.
	private IEnumerable<TableHeadingItem> Headings
	{
		get => new List<TableHeadingItem>
		{
			new TableHeadingItem(""), // Placeholder for expand/collapse button
            new TableHeadingItem("Timestamp"),
			new TableHeadingItem("Flux Action", "FluxAction"),
			new TableHeadingItem("Flux Action Type", "TypeDisplayName"),
			new TableHeadingItem("Event Id", "EventId.Id"),
			new TableHeadingItem("Outcome", "FluxActionOutcome"),
			new TableHeadingItem("Details"),
		};
	}

	// Indicates whether a trace log message group is expanded.
	private bool IsExpanded(TraceLogMessage traceLogMessage) => ExpandedRowIndexes.Contains(TraceLogMessageGroups.GetIndex(traceLogMessage));

	// Handles the event when the selected trace log message changes.
	private void HandleSelectedTraceLogMessageChanged(TraceLogMessage selectedTraceLogMessage)
	{
		var index = TraceLogMessageGroups.GetIndex(selectedTraceLogMessage);
		var args = new SelectedTraceLogMessageChangedArgs(index);
		OnSelectedTraceLogMessageChanged.InvokeAsync(args);
	}

	// Handles the event when the expansion state of a trace log message changes.
	private void HandleTraceLogMessageExpansionChanged(TraceLogMessage traceLogMessage)
	{
		var index = TraceLogMessageGroups.GetIndex(traceLogMessage);
		var isExpanded = !ExpandedRowIndexes.Contains(index);
		var args = new TraceLogMessageExpansionChangedArgs(index, isExpanded);
		OnTraceLogMessageExpansionChanged.InvokeAsync(args);
	}

	private IEnumerable<int> RowsPerPageOpts = new List<int> { 5, 10, 25 };
}



