@using Carlton.Core.Components.Tables
@using Carlton.Core.Flux.Debug.Components.Logging.EventLogging
@using Carlton.Core.Flux.Debug.Extensions
@using Carlton.Core.Foundation.State
@namespace Carlton.Core.Flux.Debug.Components.Logging.TraceLogging.LogTable

<div class="trace-log-table">
    <Table Headings="Headings"
           Items="TraceLogMessageGroups"
           ShowPaginationRow="true"
           CurrentPage="TraceLogTableState.CurrentPage"
           SelectedRowsPerPageIndex="TraceLogTableState.SelectedRowsPerPageOptsIndex"
           RowsPerPageOpts="TraceLogTableState.RowsPerPageOpts"
           OnPageChange="PageChanged"
           OnRowsPerPageChange="RowsPerPageChanged"
           SortableHeadersEnabled="false">
        <RowTemplate Context="group">
            <TraceLogTableExpandableRow 
                TraceLogMessageGroup="group"
                SelectedTraceLogMessage="SelectedTraceLogMessage"
                IsExpanded="IsExpanded(group.ParentEntry)"
                SelectedTraceLogMessageChanged="OnSelectedTraceLogMessageChanged"
                TraceLogMessageExpansionChanged="OnTraceLogMessageExapansionChanged" />
        </RowTemplate>
    </Table>
</div>


@code {
    [Parameter]
    public IEnumerable<TraceLogMessageGroup> TraceLogMessageGroups { get; set; } = new List<TraceLogMessageGroup>();

    [Parameter]
    public int SelectedTraceLogMessageIndex { get; set; }

    [Parameter]
    public required IEnumerable<int> ExpandedRowIndexes { get; set; }

    [Parameter]
    public required TableState TraceLogTableState { get; set; }

    [Parameter]
    public EventCallback<SelectedTraceLogMessageChangedArgs> SelectedTraceLogMessageChanged { get; set; }

    [Parameter]
    public EventCallback<TraceLogMessageExpansionChangedArgs> TraceLogMessageExapansionChanged { get; set; }

    [Parameter]
    public EventCallback<PageChangeEventArgs> PageChanged { get; set; }

    [Parameter]
    public EventCallback<RowsPerPageChangeEventArgs> RowsPerPageChanged { get; set; }

    private TraceLogMessage SelectedTraceLogMessage => TraceLogMessageGroups.GetElementAtIndex(SelectedTraceLogMessageIndex);

    private IEnumerable<TableHeadingItem> Headings
    {
        get => new List<TableHeadingItem>
        {
			new TableHeadingItem(""),
            new TableHeadingItem("Timestamp"),
            new TableHeadingItem("Flux Action", "FluxAction"),
            new TableHeadingItem("Flux Action Type", "TypeDisplayName"),
            new TableHeadingItem("Event Id", "EventId.Id"),
            new TableHeadingItem("Outcome", "FluxActionOutcome"),
            new TableHeadingItem("Details"),
        };
    }

    private bool IsExpanded(TraceLogMessage traceLogMessage) => ExpandedRowIndexes.Contains(TraceLogMessageGroups.GetIndex(traceLogMessage));

    private void OnSelectedTraceLogMessageChanged(TraceLogMessage selectedTraceLogMessage)
    {
        var index = TraceLogMessageGroups.GetIndex(selectedTraceLogMessage);
        var args = new SelectedTraceLogMessageChangedArgs(index);
        SelectedTraceLogMessageChanged.InvokeAsync(args);
    }

    private void OnTraceLogMessageExapansionChanged(TraceLogMessage traceLogMessage)
    {
        var index = TraceLogMessageGroups.GetIndex(traceLogMessage);
        var isExpanded = !ExpandedRowIndexes.Contains(index);
        var args = new TraceLogMessageExpansionChangedArgs(index, isExpanded);
        TraceLogMessageExapansionChanged.InvokeAsync(args);
    }
}



