@using Carlton.Core.Components.Tables
@using Carlton.Core.Flux.Debug.Components.Logging.EventLogging
@using Carlton.Core.Flux.Debug.Extensions
@using Carlton.Core.Foundation.State
@namespace Carlton.Core.Flux.Debug.Components.Logging.TraceLogging.LogTable

@* Represents a table displaying trace log messages. *@
<div class="trace-log-table">
    <Table Headings="Headings"
           Items="TraceLogMessageGroups"
           ShowPaginationRow="true"
           CurrentPage="TraceLogTableState.CurrentPage"
           SelectedRowsPerPageIndex="TraceLogTableState.SelectedRowsPerPageOptsIndex"
           RowsPerPageOpts="TraceLogTableState.RowsPerPageOpts"
           OnPageChange="PageChanged"
           OnRowsPerPageChange="RowsPerPageChanged"
           SortableHeadersEnabled="false">
        <RowTemplate Context="group">
            <TraceLogTableExpandableRow 
                TraceLogMessageGroup="group"
                SelectedTraceLogMessage="SelectedTraceLogMessage"
                IsExpanded="IsExpanded(group.ParentEntry)"
                SelectedTraceLogMessageChanged="OnSelectedTraceLogMessageChanged"
                TraceLogMessageExpansionChanged="OnTraceLogMessageExpansionChanged" />
        </RowTemplate>
    </Table>
</div>


@code {
	/// <summary>
	/// Collection of trace log message groups to display.
	/// </summary>
	[Parameter]
    public IEnumerable<TraceLogMessageGroup> TraceLogMessageGroups { get; set; } = new List<TraceLogMessageGroup>();

	/// <summary>
	/// Index of the selected trace log message.
	/// </summary>
	[Parameter]
    public int SelectedTraceLogMessageIndex { get; set; }

	/// <summary>
	/// Collection of indexes of expanded rows.
	/// </summary>
	[Parameter]
    public required IEnumerable<int> ExpandedRowIndexes { get; set; }

	/// <summary>
	/// State of the trace log table.
	/// </summary>
	[Parameter]
    public required TableState TraceLogTableState { get; set; }

	/// <summary>
	/// Event callback for when the selected trace log message changes.
	/// </summary>
	[Parameter]
    public EventCallback<SelectedTraceLogMessageChangedArgs> SelectedTraceLogMessageChanged { get; set; }

	/// <summary>
	/// Event callback for when the expansion state of a trace log message changes.
	/// </summary>
	[Parameter]
    public EventCallback<TraceLogMessageExpansionChangedArgs> TraceLogMessageExpansionChanged { get; set; }

	/// <summary>
	/// Event callback for when the page changes.
	/// </summary>
	[Parameter]
    public EventCallback<PageChangeEventArgs> PageChanged { get; set; }

	/// <summary>
	/// Event callback for when the number of rows per page changes.
	/// </summary>
	[Parameter]
    public EventCallback<RowsPerPageChangeEventArgs> RowsPerPageChanged { get; set; }

    private TraceLogMessage SelectedTraceLogMessage => TraceLogMessageGroups.GetElementAtIndex(SelectedTraceLogMessageIndex);

	// Represents the header items for the trace log table.
    private IEnumerable<TableHeadingItem> Headings
    {
        get => new List<TableHeadingItem>
        {
			new TableHeadingItem(""), // Placeholder for expand/collapse button
            new TableHeadingItem("Timestamp"),
            new TableHeadingItem("Flux Action", "FluxAction"),
            new TableHeadingItem("Flux Action Type", "TypeDisplayName"),
            new TableHeadingItem("Event Id", "EventId.Id"),
            new TableHeadingItem("Outcome", "FluxActionOutcome"),
            new TableHeadingItem("Details"),
        };
    }

	// Indicates whether a trace log message group is expanded.
    private bool IsExpanded(TraceLogMessage traceLogMessage) => ExpandedRowIndexes.Contains(TraceLogMessageGroups.GetIndex(traceLogMessage));

	// Handles the event when the selected trace log message changes.
    private void OnSelectedTraceLogMessageChanged(TraceLogMessage selectedTraceLogMessage)
    {
        var index = TraceLogMessageGroups.GetIndex(selectedTraceLogMessage);
        var args = new SelectedTraceLogMessageChangedArgs(index);
        SelectedTraceLogMessageChanged.InvokeAsync(args);
    }

	// Handles the event when the expansion state of a trace log message changes.
    private void OnTraceLogMessageExpansionChanged(TraceLogMessage traceLogMessage)
    {
        var index = TraceLogMessageGroups.GetIndex(traceLogMessage);
        var isExpanded = !ExpandedRowIndexes.Contains(index);
        var args = new TraceLogMessageExpansionChangedArgs(index, isExpanded);
        TraceLogMessageExpansionChanged.InvokeAsync(args);
    }
}



