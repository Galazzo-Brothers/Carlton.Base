@namespace Carlton.Core.Flux.Debug.Components.Logging.EventLogging


<div class="log-viewer">
    <div class="log-filters">
        <LogLevelFilter LogLevel="LogLevel.Trace" LogLevelIncluded="FilterIsActive(LogLevel.Trace)" Count="GetCountByLevel(LogLevel.Trace)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Trace, isIncluded)" />
        <LogLevelFilter LogLevel="LogLevel.Debug" LogLevelIncluded="FilterIsActive(LogLevel.Debug)" Count="GetCountByLevel(LogLevel.Debug)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Debug, isIncluded)" />
        <LogLevelFilter LogLevel="LogLevel.Information" LogLevelIncluded="FilterIsActive(LogLevel.Information)" Count="GetCountByLevel(LogLevel.Information)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Information, isIncluded)" />
        <LogLevelFilter LogLevel="LogLevel.Warning" LogLevelIncluded="FilterIsActive(LogLevel.Warning)" Count="GetCountByLevel(LogLevel.Warning)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Warning, isIncluded)" />
        <LogLevelFilter LogLevel="LogLevel.Error" LogLevelIncluded="FilterIsActive(LogLevel.Error)" Count="GetCountByLevel(LogLevel.Error)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Error, isIncluded)" />
        <LogLevelFilter LogLevel="LogLevel.Critical" LogLevelIncluded="FilterIsActive(LogLevel.Critical)" Count="GetCountByLevel(LogLevel.Critical)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Critical, isIncluded)" />
        <LogTextFilter OnTextChanged="OnFilterTextChanges" />
    </div>

    <EventLogTable LogEntries="FilteredLogMessages" LogEntrySelected="OnLogEntrySelected" />
</div>




@code {
    [Parameter]
    public IList<LogEntry> LogEntries { get; set; } = new List<LogEntry>();

    [Parameter]
    public EventCallback<LogEntry> SelectedLogEntryChanged { get; set; }

    public LogEntry SelectedLogEntry { get; private set; }

    public void OnLogEntrySelected(LogEntry selectedLogEntry)
    {
        SelectedLogEntry = selectedLogEntry;
        SelectedLogEntryChanged.InvokeAsync(selectedLogEntry);
    }

    private IList<LogLevel> includedLogLevels = new List<LogLevel>();
    private string filterText = string.Empty;

    private IEnumerable<LogEntry> FilteredLogMessages
    {
        get => LogEntries.Where(_ => includedLogLevels.Contains(_.LogLevel))
                         .Where(_ => _.Message.ToLower().Contains(filterText))
                         .OrderByDescending(_ => _.Timestamp);
    }

    protected async override Task OnInitializedAsync()
    {
        includedLogLevels = new List<LogLevel> { LogLevel.Trace, LogLevel.Debug, LogLevel.Information, LogLevel.Warning, LogLevel.Error, LogLevel.Critical };
        await base.OnInitializedAsync();
    }

    private bool FilterIsActive(LogLevel logLevel)
        => includedLogLevels.Contains(logLevel);

    private int GetCountByLevel(LogLevel logLevel)
        => LogEntries.Count(_ => _.LogLevel == logLevel);

    private void OnFilterTextChanges(string newFilterText)
        => filterText = newFilterText.ToLower();

    private void LogLevelIncludesChanged(LogLevel logLevel, bool isIncluded)
    {
        if (isIncluded)
            includedLogLevels.Add(logLevel);
        else
            includedLogLevels.Remove(logLevel);
    }
}

