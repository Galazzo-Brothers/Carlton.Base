@namespace Carlton.Core.Flux.Debug.Components.Logging.EventLogging
@using Carlton.Core.Flux.Debug.Components.Logging.EventLogging.LogTable
@using Carlton.Core.Flux.Debug.Components.Logging.EventLogging.Filtering
@using Carlton.Core.Foundation.State
@using Microsoft.Extensions.Logging

@*  Component for displaying event log viewer with filters and table. *@
<div class="log-viewer">

	<!-- Log Filters -->
	<div class="log-filters">
		<EventLogLevelFilter LogLevel="LogLevel.Trace" LogLevelIncluded="FilterIsActive(LogLevel.Trace)" Count="GetCountByLevel(LogLevel.Trace)" OnIncludeLogLevelChange="(isIncluded) => HandleLogLevelIncludesChanged(LogLevel.Trace, isIncluded)" />
		<EventLogLevelFilter LogLevel="LogLevel.Debug" LogLevelIncluded="FilterIsActive(LogLevel.Debug)" Count="GetCountByLevel(LogLevel.Debug)" OnIncludeLogLevelChange="(isIncluded) => HandleLogLevelIncludesChanged(LogLevel.Debug, isIncluded)" />
		<EventLogLevelFilter LogLevel="LogLevel.Information" LogLevelIncluded="FilterIsActive(LogLevel.Information)" Count="GetCountByLevel(LogLevel.Information)" OnIncludeLogLevelChange="(isIncluded) => HandleLogLevelIncludesChanged(LogLevel.Information, isIncluded)" />
		<EventLogLevelFilter LogLevel="LogLevel.Warning" LogLevelIncluded="FilterIsActive(LogLevel.Warning)" Count="GetCountByLevel(LogLevel.Warning)" OnIncludeLogLevelChange="(isIncluded) => HandleLogLevelIncludesChanged(LogLevel.Warning, isIncluded)" />
		<EventLogLevelFilter LogLevel="LogLevel.Error" LogLevelIncluded="FilterIsActive(LogLevel.Error)" Count="GetCountByLevel(LogLevel.Error)" OnIncludeLogLevelChange="(isIncluded) => HandleLogLevelIncludesChanged(LogLevel.Error, isIncluded)" />
		<EventLogLevelFilter LogLevel="LogLevel.Critical" LogLevelIncluded="FilterIsActive(LogLevel.Critical)" Count="GetCountByLevel(LogLevel.Critical)" OnIncludeLogLevelChange="(isIncluded) => HandleLogLevelIncludesChanged(LogLevel.Critical, isIncluded)" />
		<EventLogTextFilter Text="@EventLogViewerFilterState.FilterText" OnTextChanged="HandleFilterTextChanges" />
	</div>

	<!-- Event log table -->
	<EventLogTable LogMessages="FilteredLogMessages"
				   SelectedLogMessage="SelectedLogMessage"
				   OnLogMessageSelected="HandleLogMessageSelected" />
</div>


@code {
	/// <summary>
	/// Gets or sets the list of log messages.
	/// </summary>
	[Parameter]
	public List<LogMessage> LogMessages { get; set; } = new List<LogMessage>();

	/// <summary>
	/// Gets or sets the selected log message.
	/// </summary>
	[Parameter]
	public LogMessage? SelectedLogMessage { get; set; }

	/// <summary>
	/// Gets or sets the event log viewer filter state.
	/// </summary>
	[Parameter]
	public required EventLogViewerFilterState EventLogViewerFilterState { get; set; }

	/// <summary>
	/// Event callback for when a log message is selected.
	/// </summary>
	[Parameter]
	public EventCallback<SelectedEventLogMessageChangedArgs> OnLogMessageSelected { get; set; }

	/// <summary>
	/// Event callback for changes in log level filters.
	/// </summary>
	[Parameter]
	public EventCallback<EventLogLevelFiltersChangedArgs> OnLogLevelFiltersChanged { get; set; }

	/// <summary>
	/// Event callback for changes in the log filter text.
	/// </summary>
	[Parameter]
	public EventCallback<EventLogLevelFilterTextChangedArgs> OnLogFilterTextChanged { get; set; }

	//List of log messages based on filter settings
	private List<LogMessage> FilteredLogMessages { get; set; } = new List<LogMessage>();

	protected override void OnParametersSet()
	{
		FilteredLogMessages = LogMessages.Where(_ => EventLogViewerFilterState.IncludedLogLevels.Contains(_.LogLevel))
											.Where(_ => _.Message.ToLower().Contains(EventLogViewerFilterState.FilterText))
											.OrderByDescending(_ => _.Timestamp)
											.ToList();

		base.OnParametersSet();
	}

	// Method to check if a log level filter is active
	private bool FilterIsActive(LogLevel logLevel)
		=> EventLogViewerFilterState.IncludedLogLevels.Contains(logLevel);

	// Method to get the count of log messages for a specific log level
	private int GetCountByLevel(LogLevel logLevel)
		=> LogMessages.Count(_ => _.LogLevel == logLevel);

	// Event handler for changes in the filter text
	private void HandleFilterTextChanges(string newFilterText)
		=> OnLogFilterTextChanged.InvokeAsync(new EventLogLevelFilterTextChangedArgs(newFilterText));

	// Event handler for changes in the inclusion of log level filters
	private void HandleLogLevelIncludesChanged(LogLevel logLevel, bool isIncluded)
		=> OnLogLevelFiltersChanged.InvokeAsync(new EventLogLevelFiltersChangedArgs(logLevel, isIncluded));

	// Event handler for when a log message is selected
	private void HandleLogMessageSelected(LogMessage selectedLogMessage)
		=> OnLogMessageSelected.InvokeAsync(new SelectedEventLogMessageChangedArgs(selectedLogMessage));
}
