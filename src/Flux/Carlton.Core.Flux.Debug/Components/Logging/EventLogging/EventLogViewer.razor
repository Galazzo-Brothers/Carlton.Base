@namespace Carlton.Core.Flux.Debug.Components.Logging.EventLogging

<div class="log-viewer">
    <div class="log-filters">
        <EventLogLevelFilter LogLevel="LogLevel.Trace" LogLevelIncluded="FilterIsActive(LogLevel.Trace)" Count="GetCountByLevel(LogLevel.Trace)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Trace, isIncluded)" />
        <EventLogLevelFilter LogLevel="LogLevel.Debug" LogLevelIncluded="FilterIsActive(LogLevel.Debug)" Count="GetCountByLevel(LogLevel.Debug)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Debug, isIncluded)" />
        <EventLogLevelFilter LogLevel="LogLevel.Information" LogLevelIncluded="FilterIsActive(LogLevel.Information)" Count="GetCountByLevel(LogLevel.Information)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Information, isIncluded)" />
        <EventLogLevelFilter LogLevel="LogLevel.Warning" LogLevelIncluded="FilterIsActive(LogLevel.Warning)" Count="GetCountByLevel(LogLevel.Warning)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Warning, isIncluded)" />
        <EventLogLevelFilter LogLevel="LogLevel.Error" LogLevelIncluded="FilterIsActive(LogLevel.Error)" Count="GetCountByLevel(LogLevel.Error)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Error, isIncluded)" />
        <EventLogLevelFilter LogLevel="LogLevel.Critical" LogLevelIncluded="FilterIsActive(LogLevel.Critical)" Count="GetCountByLevel(LogLevel.Critical)" OnIncludeLogLevelChange="(isIncluded) => LogLevelIncludesChanged(LogLevel.Critical, isIncluded)" />
        <EventLogTextFilter Text="@EventLogViewerFilterState.FilterText" OnTextChanged="OnFilterTextChanges" />
    </div>

    <EventLogTable LogMessages="FilteredLogMessages"
                   SelectedLogMessageIndex="SelectedLogMessageIndex"
                   EventLogTableState="EventLogTableState"
                   LogMessageSelected="LogMessageSelected"
                   OnPageChange="PageChanged"
                   OnRowsPerPageChange="RowsPerPageChanged" 
                   OnItemsSort="ItemsOrdered" />
</div>


@code {
    [Parameter]    public List<LogMessage> LogMessages { get; set; } = new List<LogMessage>();

    [Parameter]
    public int SelectedLogMessageIndex { get; set; }

    [Parameter]
    public required EventLogViewerFilterState EventLogViewerFilterState { get; set; }

    [Parameter]
    public required TableState EventLogTableState { get; set; }

    [Parameter]
    public EventCallback<SelectedEventLogMessageChangedArgs> LogMessageSelected { get; set; }

    [Parameter]
    public EventCallback<EventLogLevelFiltersChangedArgs> LogLevelFiltersChanged { get; set; }

    [Parameter]
    public EventCallback<EventLogLevelFilterTextChangedArgs> LogFilterTextChanged { get; set; }

    [Parameter]
    public EventCallback<PageChangeEventArgs> PageChanged { get; set; }

    [Parameter]
    public EventCallback<RowsPerPageChangeEventArgs> RowsPerPageChanged { get; set; }

    [Parameter]
    public EventCallback<ItemsSortEventArgs> ItemsOrdered { get; set; }

    private List<LogMessage> FilteredLogMessages
    {
        get => LogMessages.Where(_ => EventLogViewerFilterState.IncludedLogLevels.Contains(_.LogLevel))
                          .Where(_ => _.Message.ToLower().Contains(EventLogViewerFilterState.FilterText))
                          .OrderByDescending(_ => _.Timestamp)
                          .ToList();
    }

    private bool FilterIsActive(LogLevel logLevel)
        => EventLogViewerFilterState.IncludedLogLevels.Contains(logLevel);

    private int GetCountByLevel(LogLevel logLevel)
        => LogMessages.Count(_ => _.LogLevel == logLevel);

    private void OnFilterTextChanges(string newFilterText)
        => LogFilterTextChanged.InvokeAsync(new EventLogLevelFilterTextChangedArgs(newFilterText));

    private void LogLevelIncludesChanged(LogLevel logLevel, bool isIncluded)
        => LogLevelFiltersChanged.InvokeAsync(new EventLogLevelFiltersChangedArgs(logLevel, isIncluded));
}

