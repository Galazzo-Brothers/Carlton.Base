@namespace Carlton.Core.Flux.Debug.Components.Logging.EventLogging
@using Carlton.Core.Components.Checkboxes


@* Component for filtering log levels in a debug environment. *@
<div class="log-level-filter @LogLevel.ToString().ToLower()" @onclick="() => OnLogLevelCheckedChanged(!LogLevelIncluded)">
    <Checkbox IsChecked="LogLevelIncluded" />
    <span class="log-level-label">@LogLevelLabel:</span>
    <span class="log-level-count">@Count</span>
</div>


@code {
	/// <summary>
	/// Gets or sets the log level to filter.
	/// </summary>
	[Parameter]
    public LogLevel LogLevel { get; set; }

	/// <summary>
	/// Gets or sets a value indicating whether the log level is included.
	/// </summary>
	[Parameter]
    public bool LogLevelIncluded { get; set; }

	/// <summary>
	/// Gets or sets the count of log messages for the specified log level.
	/// </summary>
	[Parameter]
    public int Count { get; set; }

	/// <summary>
	/// Gets or sets the event callback for when the log level inclusion state changes.
	/// </summary>
	[Parameter]
    public EventCallback<bool> OnIncludeLogLevelChange { get; set; }

    private async Task OnLogLevelCheckedChanged(bool isChecked)
    {
        LogLevelIncluded = isChecked;
        await OnIncludeLogLevelChange.InvokeAsync(isChecked);
    }

    private string LogLevelLabel
    {
        get
        {
            switch (LogLevel)
            {
                case LogLevel.Trace:
                    return "Trace";
                case LogLevel.Debug:
                    return "Debug";
                case LogLevel.Information:
                    return "Info";
                case LogLevel.Warning:
                    return "Warn";
                case LogLevel.Error:
                    return "Error";
                case LogLevel.Critical:
                    return "Critical";
                default:
                    throw new ArgumentException("Invalid LogLevel specificed");
            }
        }
    }
}
