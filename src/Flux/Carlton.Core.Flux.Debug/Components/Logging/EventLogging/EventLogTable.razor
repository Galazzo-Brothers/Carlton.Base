@using Carlton.Core.Components.Table;
@using Carlton.Core.Utilities.Extensions;
@namespace Carlton.Core.Flux.Debug.Components.Logging.EventLogging

<div class="log-table">
    <Table Headings="Headings"
           Items="LogMessages"
           ShowPaginationRow="true"
           RowsPerPageOpts="RowsPerPageInts"
           ZebraStripped="true"
           Hoverable="true">
        <RowTemplate Context="item">
            <EventLogTableRow LogEntry="item" LogMessageSelected="OnLogMessageSelected" IsSelected="item==SelectedLogMessage" />
        </RowTemplate>
    </Table>
</div>

@code {
    [Parameter]
    public List<LogMessage> LogMessages { get; set; } = new();

    [Parameter]
    public int SelectedLogMessageIndex { get; set; }

    [Parameter]
    public EventCallback<SelectedEventLogMessageChangedArgs> LogMessageSelected { get; set; }

    private LogMessage? SelectedLogMessage => LogMessages.SafeGetAtIndex(SelectedLogMessageIndex);

    private void OnLogMessageSelected(LogMessage selectedLogMessage)
    {
        var index = LogMessages.FindIndex(_ => _ == selectedLogMessage);
        SelectedLogMessageIndex = index;
        var args = new SelectedEventLogMessageChangedArgs(index);
        LogMessageSelected.InvokeAsync(args);
    }

    private IEnumerable<TableHeadingItem> Headings
    {
        get => new List<TableHeadingItem>
        {
            new TableHeadingItem("Timestamp"),
            new TableHeadingItem("Message"),
            new TableHeadingItem("Log Level", "Log Level"),
            new TableHeadingItem("Event ID", "EventId"),
            new TableHeadingItem("Event Name", "EventName"),
        };
    }

    private IEnumerable<int> RowsPerPageInts = new List<int>
    {
        5, 10, 25
    };
}
