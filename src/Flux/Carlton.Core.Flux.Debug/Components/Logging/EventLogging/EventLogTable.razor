@using Carlton.Core.Utilities.Extensions;
@namespace Carlton.Core.Flux.Debug.Components.Logging.EventLogging

<div class="log-table">
    <Table Headings="Headings"
           Items="LogMessages"
           ShowPaginationRow="true"
           OrderColumn="@EventLogTableState.OrderByColum"
           OrderAscending="EventLogTableState.OrderAscending"
           CurrentPage="EventLogTableState.CurrentPage"
           SelectedRowsPerPageIndex="EventLogTableState.SelectedRowsPerPageOptsIndex"
           RowsPerPageOpts="EventLogTableState.RowsPerPageOpts"
           ZebraStripped="true"
           Hoverable="true"
           OnPageChange="OnPageChange"
           OnRowsPerPageChange="OnRowsPerPageChange"
           OnItemsSort="OnItemsSort">
        <RowTemplate Context="item">
            <EventLogTableRow LogEntry="item"
                              LogMessageSelected="OnLogMessageSelected"
                              IsSelected="item==SelectedLogMessage" />
        </RowTemplate>
    </Table>
</div>

@code {
    [Parameter]
    public List<LogMessage> LogMessages { get; set; } = new();

    [Parameter]
    public int SelectedLogMessageIndex { get; set; }

    [Parameter]
    public required TableState EventLogTableState { get; set; }

    [Parameter]
    public EventCallback<SelectedEventLogMessageChangedArgs> LogMessageSelected { get; set; }

    [Parameter]
    public EventCallback<PageChangeEventArgs> OnPageChange { get; set; }

    [Parameter]
    public EventCallback<RowsPerPageChangeEventArgs> OnRowsPerPageChange { get; set; }

    [Parameter]
    public EventCallback<ItemsSortEventArgs> OnItemsSort { get; set; }

    private LogMessage? SelectedLogMessage => LogMessages.SafeGetAtIndex(SelectedLogMessageIndex);

    private void OnLogMessageSelected(LogMessage selectedLogMessage)
    {
        var index = LogMessages.FindIndex(_ => _ == selectedLogMessage);
        SelectedLogMessageIndex = index;
        var args = new SelectedEventLogMessageChangedArgs(index);
        LogMessageSelected.InvokeAsync(args);
    }

    private IEnumerable<TableHeadingItem> Headings
    {
        get => new List<TableHeadingItem>
        {
            new TableHeadingItem("Timestamp"),
            new TableHeadingItem("Message"),
            new TableHeadingItem("Log Level", "LogLevel"),
            new TableHeadingItem("Event ID", "EventId.Id"),
            new TableHeadingItem("Event Name", "EventId.Name"),
        };
    }
}
