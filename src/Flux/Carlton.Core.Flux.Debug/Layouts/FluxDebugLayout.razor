@using Carlton.Core.BrowserStroage
@using Carlton.Core.Flux.Debug.Storage
@using Microsoft.AspNetCore.Components.Routing
@using Mapster
@using MapsterMapper
@using Carlton.Core.Components.Layouts
@using Carlton.Core.Flux.Debug.Components.Nav
@using Carlton.Core.Flux.Debug.Layouts
@namespace Carlton.Core.Flux.Debug.Layouts
@inherits LayoutComponentBase
@inject ILogsDataAccess LogsDataAccess
@inject NavigationManager NavigationManager
@inject IFluxState<FluxDebugState> FluxDebugState
@inject IMapper Mapper

<DashboardDevPanelLayout ShowPanel="false">
    <NavContent>
        <FluxDebugNavMenu />
    </NavContent>
    <PageTitleContent>
        <BreadCrumbs Title="Debug" Separator="'>'" BreadCrumbItems="new string[] {GetCurrentPage()}" />
    </PageTitleContent>
    <HeaderActionContent>
        <PassiveFluxDebugComponent TViewModel="HeaderActionsViewModel" PassiveViewModel="HeaderActionsViewModel" />
    </HeaderActionContent>
    <Body>
        @if (LoadingComplete)
        {
            @Body
        }
        else
        {
            <Spinner />
        }
    </Body>
    <PanelContent>
    </PanelContent>
</DashboardDevPanelLayout>


@code {
    private bool LoadingComplete { get; set; } = false;

    private HeaderActionsViewModel HeaderActionsViewModel { get; } 
        = new HeaderActionsViewModel("Stephen", "_content/Carlton.Core.Components/images/avatar.jpg");

    protected override async Task OnInitializedAsync()
    {
        //Save Logs from your in app memory loggers to IndexDB
        await LogsDataAccess.CommitLogs();

        //Get todays logs to hydrate a FluxDebug state object
        var logs = await LogsDataAccess.GetLogs(DateTime.Now.Date);
     
        //flatten logs
        var flattenedLogs = logs.SelectMany(_ => _.LogMessages);

        //Hydrate a FluxDebug state object
        var newState = new FluxDebugState(new object(), flattenedLogs);

        //Replace the container state with our constructed state
        //via the magic of reflection
        Mapper.Map(newState, FluxDebugState.State);

        //Allow the child components to render
        LoadingComplete = true;

        await base.OnInitializedAsync();
    }

    private string GetCurrentPage()
    {
        // Get the full URI
        string fullUri = NavigationManager.Uri;

        // Get the base URI of the app
        string baseUri = NavigationManager.BaseUri;

        // Extract the tail end of the route (current page) by removing the base URI
        var currentRoute = fullUri.Substring(baseUri.Length).Split('/').Last();

        //Title case the route
        return char.ToUpper(currentRoute[0]) + currentRoute.Substring(1);
    }
}
