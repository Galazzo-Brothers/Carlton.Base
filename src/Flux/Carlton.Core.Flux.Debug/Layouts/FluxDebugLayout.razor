@using Carlton.Core.BrowserStroage
@using Carlton.Core.Components.Footers
@using Carlton.Core.Components.Layouts.DashboardLayouts.PanelLayout
@using Carlton.Core.Components.Layouts.DashboardLayouts.TabbedPanelLayout
@using Carlton.Core.Components.Navigation
@using Carlton.Core.Components.Spinners
@using Carlton.Core.Flux.Debug.Storage
@using Carlton.Core.Flux.Models
@using Microsoft.AspNetCore.Components.Routing
@using Carlton.Core.Components.Layouts
@using Carlton.Core.Flux.Debug.Components.Nav
@using Carlton.Core.Flux.Debug.Layouts
@namespace Carlton.Core.Flux.Debug.Layouts
@inherits LayoutComponentBase
@inject ILogsDataAccess LogsDataAccess
@inject NavigationManager NavigationManager
@inject IFluxState<FluxDebugState> FluxDebugState
@inject MemoryLogger MemoryLogger
@inject IMutationCommandDispatcher<FluxDebugState> Dispatcher
@layout DashboardTabbedPanelLayout

@if (LoadingComplete)
{
    @Body
}
else
{
    <Spinner />
}


<SectionContent SectionId="DashboardPanelLayout.Nav">
    <FluxDebugNavMenu />
</SectionContent>

<SectionContent SectionId="DashboardPanelLayout.HeaderPageTitle">
    <BreadCrumbs Title="Debug" Separator="'>'" BreadCrumbItems="new string[] {GetCurrentPage()}" />
</SectionContent>

<SectionContent SectionId="DashboardPanelLayout.HeaderActionContent">
    <PassiveFluxDebugComponent TViewModel="HeaderActionsViewModel" PassiveViewModel="HeaderActionsViewModel" />
</SectionContent>

<SectionContent SectionId="DashboardPanelLayout.Footer">
    <Footer />
</SectionContent>

@code {
    private bool LoadingComplete { get; set; } = false;

    private HeaderActionsViewModel HeaderActionsViewModel { get; } 
        = new HeaderActionsViewModel
        { 
            UserName = "Stephen",
            AvatarUrl = "_content/Carlton.Core.Components/images/avatar.jpg"
        };

    protected override async Task OnInitializedAsync()
    {
        //Load the log messages
        var command = new LoadLogMessagesCommand { LogMessages = MemoryLogger.GetLogMessages() };
        await Dispatcher.Dispatch<FluxDebugState, LoadLogMessagesCommand>(this, command, CancellationToken.None);

        //Allow the child components to render
        LoadingComplete = true;

        await base.OnInitializedAsync();
    }

    private string GetCurrentPage()
    {
        // Get the full URI
        string fullUri = NavigationManager.Uri;

        // Get the base URI of the app
        string baseUri = NavigationManager.BaseUri;

        // Extract the tail end of the route (current page) by removing the base URI
        var currentRoute = fullUri.Substring(baseUri.Length).Split('/').Last();

        //Title case the route
        return char.ToUpper(currentRoute[0]) + currentRoute.Substring(1);
    }
}
