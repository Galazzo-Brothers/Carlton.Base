@using Carlton.Core.Components.Footers
@using Carlton.Core.Components.Logos
@using Carlton.Core.Components.Navigation
@using Carlton.Core.Components.Spinners
@using Carlton.Core.Layouts.DashboardLayouts.TabbedPanelLayout
@using Carlton.Core.LayoutServices.FullScreen
@using Carlton.Core.Layouts.DashboardLayouts.PanelLayout
@using Microsoft.AspNetCore.Components.Routing
@using Carlton.Core.Flux.Debug.Components.Nav
@using Carlton.Core.Flux.Debug.Layouts
@namespace Carlton.Core.Flux.Debug.Layouts
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IFluxState<FluxDebugState> FluxDebugState
@inject MemoryLogger MemoryLogger
@inject IMutationCommandDispatcher<FluxDebugState> Dispatcher
@inject IFullScreenState FullScreenState
@layout DashboardTabbedPanelLayout

@* Layout component for the Flux Debug layout. *@
@if (IsLoading)
{
	<Spinner />
}
else
{
	@Body
}

<SectionContent SectionId="DashboardPanelLayout.Nav">
	<!-- FluxDebugNavMenu component -->
	<FluxDebugNavMenu />
</SectionContent>

<SectionContent SectionId="DashboardPanelLayout.HeaderPageTitle">
	<!-- BreadCrumbs component -->
	<BreadCrumbs Title="Debug" Separator="'>'" BreadCrumbItems="new string[] {GetCurrentPage()}" />
</SectionContent>

<SectionContent SectionId="DashboardPanelLayout.HeaderActionContent">
	<!-- HeaderActions component -->
	<PassiveFluxDebugComponent TViewModel="HeaderActionsViewModel" PassiveViewModel="HeaderActionsViewModel" />
</SectionContent>

<SectionContent SectionId="DashboardPanelLayout.Logo">
	<!-- Displays the logo. -->
	<Logo Title="@AppName" LogoUrl="@LogoUrl" IsCollapsed="FullScreenState.IsFullScreen" />
</SectionContent>

<SectionContent SectionId="DashboardPanelLayout.Footer">
	<!-- Footer component -->
	<Footer />
</SectionContent>

@code {
	// Application name
	private const string AppName = "Carlton Flux Debug";
	// URL of the application's logo
	private const string LogoUrl = "_content/Carlton.Core.Components/images/CarltonLogo.png";

	private bool IsLoading { get; set; }

	private HeaderActionsViewModel HeaderActionsViewModel { get; }
		= new HeaderActionsViewModel
			{
				UserName = "Stephen",
				AvatarUrl = "_content/Carlton.Core.Components/images/avatar.jpg"
			};

	protected override async Task OnInitializedAsync()
	{
		//Show the spinner
		IsLoading = true;

		// //Load the log messages
		await Task.Run(async () =>
		{
			var command = new LoadLogMessagesCommand { LogMessages = MemoryLogger.GetLogMessages().ToList() };
			await Dispatcher.Dispatch<FluxDebugState, LoadLogMessagesCommand>(this, command, CancellationToken.None);
		});

		//Allow the child components to render
		IsLoading = false;

		await base.OnInitializedAsync();
	}

	private string GetCurrentPage()
	{
		// Get the full URI
		string fullUri = NavigationManager.Uri;

		// Get the base URI of the app
		string baseUri = NavigationManager.BaseUri;

		// Extract the tail end of the route (current page) by removing the base URI
		var currentRoute = fullUri.Substring(baseUri.Length).Split('/').Last();

		//Title case the route
		return char.ToUpper(currentRoute[0]) + currentRoute.Substring(1);
	}
}
