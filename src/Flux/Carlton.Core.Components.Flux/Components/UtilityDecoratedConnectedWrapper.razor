@namespace Carlton.Core.Components.Flux
@typeparam TViewModel
@typeparam TState
@inherits ConnectedWrapper<TViewModel, TState>
@inject ILogger<UtilityDecoratedConnectedWrapper<TViewModel, TState>> Logger

@if(IsLoading)
{
    @SpinnerContent
}
else
{
    //TODO add DataComponentErrorBoundary when it is available
    <DynamicComponent Type="WrappedComponentType" Parameters="GetParameters()" />
}


@code {
    [Parameter]
    public RenderFragment SpinnerContent { get; set; }

    private bool IsLoading
    {
        get
        {
            var isLoading = ViewModel == null;
            Log.DataWrapperIsLoadingChanged(Logger, base.WrappedComponentDisplayName, isLoading);
            return isLoading;
        }
    }

    //protected override async Task<Unit> OnComponentEvent<TCommand>(object sender, TCommand command)
    //{
    //    using(Logger.BeginScope(Log.CommandScopeMessage, request.DisplayName, request.RequestID))
    //    {
    //        //   Log.CommandRequestStarted(Logger, request.DisplayName, request.RequestID);
    //        var result = await base.OnComponentEvent<TCommand>(request);
    //        //   Log.CommandRequestCompleted(Logger, request.DisplayName, request.RequestID);
    //        return result;
    //    }
    //}

    protected override async Task<bool> OnStateChanged(string stateEvent)
    {
        try
        {
            Log.DataWrapperEventReceived(Logger, base.WrappedComponentDisplayName, stateEvent, ObserveableStateEvents.Select(_ => (object)_));
            var result = await base.OnStateChanged(stateEvent);
            Log.DataWrapperEventCompleted(Logger, base.WrappedComponentDisplayName, stateEvent, result);
            return result;
        }
        catch(Exception ex)
        {
            Log.DataWrapperError(Logger, ex, base.WrappedComponentDisplayName);
            throw;// ConnectedComponentException<TViewModel, TStateEvents>.CreateStateEventException(this, ex);
        }
    }

    protected override Dictionary<string, object> GetParameters()
    {
        try
        {
            Log.DataWrapperParametersSetting(Logger, base.WrappedComponentDisplayName, ViewModel);
            var result = base.GetParameters();
            Log.DataWrapperParametersSet(Logger, base.WrappedComponentDisplayName, ViewModel);
            return result;
        }
        catch(Exception ex)
        {
            Log.DataWrapperError(Logger, ex, base.WrappedComponentDisplayName);
            throw;// ConnectedComponentException<TViewModel, TStateEvents>.CreateSettingComponentParametersException(this, ex);
        }
    }
}