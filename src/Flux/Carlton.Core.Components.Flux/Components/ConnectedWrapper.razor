@namespace Carlton.Core.Components.Flux
@implements IDisposable
@typeparam TViewModel
@typeparam TState
@inject IConnectedComponent<TViewModel> Component
@inject IViewModelQueryDispatcher<TState> QueryDispatcher
@inject IMutationCommandDispatcher<TState> MutationDispatcher
@inject IFluxStateObserver<TState> StateObserver
@inject ILogger<ConnectedWrapper<TViewModel, TState>> Logger

@if(IsLoading)
{
    @SpinnerContent
}
else
{
    <DynamicComponent Type="WrappedComponentType" Parameters="GetParameters()" />
}


@code {
    [Parameter]
    public RenderFragment SpinnerContent { get; set; }

    public Type WrappedComponentType { get => Component.GetType(); }

    public string WrappedComponentDisplayName { get => WrappedComponentType.GetDisplayName(); }

    public TViewModel ViewModel { get; private set; }

    public IEnumerable<string> ObservableStateEvents { get; private set; } = new List<string>();

    public bool IsLoading { get; private set; }

    private string ViewModelDisplayName { get => typeof(TViewModel).GetDisplayName(); }

    protected async override Task OnInitializedAsync()
    {
        var initTraceGuid = $"DataWrapper_{ViewModelDisplayName}_Init";
        using(Logger.BeginScope(initTraceGuid))
        {
            //Log Init Start
            Log.DataWrapperOnInitializedStarted(Logger, WrappedComponentDisplayName);

            //Set IsLoading to true
            IsLoading = true;

            //Register State Changed Handler
            StateObserver.StateChanged += OnStateChanged;

            //Get VM and initialize context for wrapped component
            ViewModel = await GetViewModel();

            //Gather the StateEvents this component should be listening for
            var attributes = WrappedComponentType.GetCustomAttributes<ObserveStateEventsAttribute>();
            ObservableStateEvents = attributes.Select(_ => _.StateEvent);

            //Set IsLoading to false
            IsLoading = false;

            //Continue initialization
            await base.OnInitializedAsync();

            //Log Init Completed
            Log.DataWrapperOnInitializedCompleted(Logger, WrappedComponentDisplayName);
        }
    }

    protected async Task<TViewModel> GetViewModel()
    {
        var query = new ViewModelQuery();
        return await QueryDispatcher.Dispatch<TViewModel>(Component, query, CancellationToken.None);
    }

    protected async Task OnComponentEvent<TCommand>(object sender, TCommand command)
    {
        Log.DataWrapperEventRaiseStarted(Logger, WrappedComponentDisplayName, command);
        await MutationDispatcher.Dispatch(Component, (dynamic)command, CancellationToken.None);
        Log.DataWrapperEventRaiseCompleted(Logger, WrappedComponentDisplayName, command);
    }

    protected async Task OnStateChanged(string stateEvent)
    {
        var observableStateEventsString = string.Join(',', ObservableStateEvents);
        Log.DataWrapperListeningEvents(Logger, WrappedComponentDisplayName, observableStateEventsString);

        if(ObservableStateEvents.Contains(stateEvent))
        {
            //State required refresh
            Log.DataWrapperEventReceivedStarted(Logger, WrappedComponentDisplayName, stateEvent);

            //Set loading true
            IsLoading = true;

            //Refresh ViewModel
            ViewModel = await GetViewModel();

            //Set loading false
            IsLoading = false;

            //StateHasChanged
            StateHasChanged();
            Log.DataWrapperEventReceivedCompleted(Logger, WrappedComponentDisplayName, stateEvent);
        }
        else
        {
            //State does not require refresh
            Log.DataWrapperEventSkipped(Logger, WrappedComponentDisplayName, stateEvent);
        }
    }

    protected Dictionary<string, object> GetParameters()
    {
        var eventCallback = EventCallback.Factory.Create<MutationCommand>(this, (command) => OnComponentEvent(Component, command));
        return new Dictionary<string, object>
            {
                { "ViewModel", ViewModel },
                { "GetViewModel", async () => await GetViewModel() },
                { "OnComponentEvent", eventCallback }
            };
    }

    public void Dispose()
    {
        StateObserver.StateChanged -= OnStateChanged;
    }
}