@namespace Carlton.Core.Components.Flux
@implements IDisposable
@typeparam TState
@typeparam TViewModel
@inject IConnectedComponent<TViewModel> Component
@inject IViewModelQueryDispatcher<TState> QueryDispatcher
@inject IMutationCommandDispatcher<TState> MutationDispatcher
@inject IFluxStateObserver<TState> StateObserver
@inject IBrowserStorageService BrowserStorage
@inject ILogger<ConnectedWrapper<TState, TViewModel>> Logger

<ConnectedComponentContent SpinnerContent="SpinnerContent"
                           WrappedComponentType="WrappedComponentType"
                           Parameters="GetParameters()"
                           IsLoading="IsLoading" />


@code {
    [Parameter]
    public RenderFragment SpinnerContent { get; set; }

    public Type WrappedComponentType { get => Component.GetType(); }

    public string WrappedComponentDisplayName { get => WrappedComponentType.GetDisplayName(); }

    public TViewModel ViewModel { get; private set; }

    public IEnumerable<string> ObservableStateEvents { get; private set; } = new List<string>();

    public bool IsLoading { get; private set; }

    private string ViewModelDisplayName { get => typeof(TViewModel).GetDisplayName(); }

    protected async override Task OnInitializedAsync()
    {
        var guid = Guid.NewGuid();
        var initTraceGuid = $"Init_{ViewModelDisplayName}_{guid}";
        using (Logger.BeginScope(initTraceGuid))
        {
            //Log Init Start
            Logger.DataWrapperOnInitializedStarted(typeof(TViewModel).GetDisplayName());

            //Set IsLoading to true
            IsLoading = true;

            //Register State Changed Handler
            StateObserver.StateChanged += OnStateChanged;

            //Get VM and initialize context for wrapped component
            ViewModel = await GetViewModel();

            //Gather the StateEvents this component should be listening for
            var attributes = WrappedComponentType.GetCustomAttributes<ObserveStateEventsAttribute>();
            ObservableStateEvents = attributes.Select(_ => _.StateEvent);

            //Set IsLoading to false
            IsLoading = false;

            //Continue initialization
            await base.OnInitializedAsync();

            //Log Init Completed
            Logger.DataWrapperOnInitializedCompleted(WrappedComponentDisplayName);
        }
    }

    protected virtual async Task<TViewModel> GetViewModel()
    {
        var query = new ViewModelQuery();
        return await QueryDispatcher.Dispatch<TViewModel>(Component, query, CancellationToken.None);
    }

    protected async Task OnComponentEvent<TCommand>(object sender, TCommand command)
        where TCommand : MutationCommand
    {
        var guid = Guid.NewGuid();
        var commandName = command.GetType().GetDisplayName();
        var commandTraceGuid = $"Command_{commandName}_{guid}";
        using (Logger.BeginScope(commandTraceGuid))
        {
            Logger.DataWrapperCommandDispatchStarted(WrappedComponentDisplayName, commandName);
            await MutationDispatcher.Dispatch(Component, (dynamic)command, CancellationToken.None);
            Logger.DataWrapperCommandDispatchCompleted(WrappedComponentDisplayName, commandName);
        }
    }

    private async Task OnStateChanged(string stateEvent)
    {
        var guid = Guid.NewGuid();
        var eventTraceGuid = $"Event_{stateEvent}_{guid}";
        using (Logger.BeginScope(eventTraceGuid))
        {
            var observableStateEventsString = string.Join(',', ObservableStateEvents);
            Logger.DataWrapperListeningEvents(WrappedComponentDisplayName, observableStateEventsString);

            if (ObservableStateEvents.Contains(stateEvent))
            {
                //State required refresh
                Logger.DataWrapperEventReceivedStarted(WrappedComponentDisplayName, stateEvent);

                //Set loading true
                IsLoading = true;

                //Refresh ViewModel
                ViewModel = await GetViewModel();

                //Set loading false
                IsLoading = false;

                //StateHasChanged
                StateHasChanged();
                Logger.DataWrapperEventReceivedCompleted(WrappedComponentDisplayName, stateEvent);
            }
            else
            {
                //State does not require refresh
                Logger.DataWrapperEventSkipped(WrappedComponentDisplayName, stateEvent);
            }
        }
    }

    protected Dictionary<string, object> GetParameters()
    {
        var eventCallback = EventCallback.Factory.Create<MutationCommand>(this, (command) => OnComponentEvent(Component, command));
        return new Dictionary<string, object>
            {
                { "ViewModel", ViewModel },
                { "GetViewModel", async () => await GetViewModel() },
                { "OnComponentEvent", eventCallback }
            };
    }

    public void Dispose()
    {
        StateObserver.StateChanged -= OnStateChanged;
    }
}