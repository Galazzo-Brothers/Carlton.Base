@namespace Carlton.Core.Components.Flux
@implements IDisposable
@typeparam TViewModel
@typeparam TState
@inject IConnectedComponent<TViewModel> Component
@inject IViewModelQueryDispatcher<TState> QueryDispatcher
@inject IMutationCommandDispatcher<TState> MutationDispatcher
@inject IFluxStateObserver<TState> StateObserver
@inject ILogger<ConnectedWrapper<TViewModel, TState>> Logger

@if(IsLoading)
{
    @SpinnerContent
}
else
{
    <DynamicComponent Type="WrappedComponentType" Parameters="GetParameters()" />
}


@code {
    [Parameter]
    public RenderFragment SpinnerContent { get; set; }

    public Type WrappedComponentType { get => Component.GetType(); }

    public string WrappedComponentDisplayName { get => WrappedComponentType.GetDisplayName(); }

    public TViewModel ViewModel { get; private set; }

    public IEnumerable<string> ObserveableStateEvents { get; private set; } = new List<string>();

    public bool IsLoading { get; private set; }

    protected async override Task OnInitializedAsync()
    {
        //Log Init Start
        Log.DataWrapperOnInitializedStarted(Logger, WrappedComponentDisplayName);

        //Set IsLoading to true
        IsLoading = true;

        //Register State Changed Handler
        StateObserver.StateChanged += OnStateChanged;

        //Get VM and initalize context for wrapped component
        ViewModel = await GetViewModel();

        //Gather the StateEvents this component should be listening for
        var attributes = WrappedComponentType.GetCustomAttributes<ObserveStateEventsAttribute>();
        ObserveableStateEvents = attributes.Select(_ => _.StateEvent);

        //Set IsLoading to false
        IsLoading = false;

        //Continue initilization
        await base.OnInitializedAsync();

        //Log Init Completed
        Log.DataWrapperOnInitializedCompleted(Logger, WrappedComponentDisplayName);
    }

    protected async Task<TViewModel> GetViewModel()
    {
        var query = new ViewModelQuery(Component);
        return await QueryDispatcher.Dispatch<TViewModel>(query, CancellationToken.None);
    }

    protected async Task OnComponentEvent<TCommand>(object sender, TCommand command)
    {
        await MutationDispatcher.Dispatch((dynamic)command, CancellationToken.None);
    }

    protected async Task OnStateChanged(string stateEvent)
    {
        var stateUpdated = false;
        var observableStateEventsString = string.Join(',', ObserveableStateEvents);
        Log.DataWrapperEventReceived(Logger, WrappedComponentDisplayName, stateEvent, observableStateEventsString);

        if(ObserveableStateEvents.Contains(stateEvent))
        {
            //IsLoading true
            IsLoading = true;

            //Refresh ViewModel
            ViewModel = await GetViewModel();

            //IsLoading flase
            IsLoading = false;

            //State was refreshed
            stateUpdated = true;
            StateHasChanged();
        }

        Log.DataWrapperEventCompleted(Logger, WrappedComponentDisplayName, stateEvent, stateUpdated);
    }

    protected Dictionary<string, object> GetParameters()
    {
        var eventCallback = EventCallback.Factory.Create<MutationCommand>(this, (command) => OnComponentEvent(Component, command));
        return new Dictionary<string, object>
            {
                { "ViewModel", ViewModel },
                { "GetViewModel", async () => await GetViewModel() },
                { "OnComponentEvent", eventCallback }
            };
    }

    public void Dispose()
    {
        StateObserver.StateChanged -= OnStateChanged;
    }
}