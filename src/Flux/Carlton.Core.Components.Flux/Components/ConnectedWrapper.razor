@namespace Carlton.Core.Components.Flux
@implements IDataWrapper
@implements IDisposable
@typeparam TViewModel
@typeparam TStateEvents where TStateEvents : Enum
@inject IConnectedComponent<TViewModel> Component
@inject IViewModelDispatcher QueryDispatcher
@inject ICommandDispatcher CommandDispatcher
@inject IStateStore<TStateEvents> StateStore
@inject ILogger<ConnectedWrapper<TViewModel, TStateEvents>> Logger

<DynamicComponent Type="WrappedComponentType" Parameters="GetParameters()" />


@code {
    public Object State { get => StateStore; }

    public Type WrappedComponentType { get => Component.GetType(); }

    public string WrappedComponentDisplayName { get => WrappedComponentType.GetDisplayName(); }

    public TViewModel ViewModel { get; private set; }

    public IEnumerable<TStateEvents> ObserveableStateEvents { get; private set; } = new List<TStateEvents> { };

    protected async override Task OnInitializedAsync()
    {
        //Register State Changed Handler
        StateStore.StateChanged += OnStateChanged;

        //Get VM and initalize context for wrapped component
        ViewModel = await GetViewModelInternal();

        //Gather the StateEvents this component should be listening for
        var attributes = (IEnumerable<ObserveStateEventsAttribute<TStateEvents>>)WrappedComponentType.GetCustomAttributes(typeof(ObserveStateEventsAttribute<TStateEvents>));
        ObserveableStateEvents = attributes.Select(_ => _.StateEvent);

        //Continue initilization
        await base.OnInitializedAsync();
    }

    private async Task<TViewModel> GetViewModelInternal()
    {
        var request = new ViewModelRequest<TViewModel>(this);
        return await GetViewModel(request);
    }

    protected async virtual Task<TViewModel> GetViewModel(ViewModelRequest<TViewModel> request)
    {
       return await QueryDispatcher.Dispatch<TViewModel>(request, CancellationToken.None);
    }

    protected async Task<Unit> OnComponentEventInternal<TCommand>(object sender, TCommand command)
    {
        var commandType = command.GetType();
        var request = (dynamic) Activator.CreateInstance(typeof(CommandRequest<>).MakeGenericType(command.GetType()), this, command);
        return await OnComponentEvent(request);
    }

    protected async virtual Task<Unit> OnComponentEvent<TCommand>(CommandRequest<TCommand> request)
    {
        return await CommandDispatcher.Dispatch<TCommand>(request, CancellationToken.None);
    }

    protected virtual async Task<bool> OnStateChanged(object sender, TStateEvents stateEvent)
    {
        if(!ObserveableStateEvents.Contains(stateEvent))
            return false;
  
        ViewModel = await GetViewModelInternal();
        StateHasChanged();
        return true;
    }

    protected virtual Dictionary<string, object> GetParameters()
    {
        var eventCallback = EventCallback.Factory.Create<object>(this, (command) => OnComponentEventInternal(Component, command));
        return new Dictionary<string, object>
            {
                { "ViewModel", ViewModel },
                { "GetViewModel", async () => await GetViewModelInternal() },
                { "OnComponentEvent", eventCallback }
            };
    }

    public void Dispose()
    {
        StateStore.StateChanged -= OnStateChanged;
    }
}