@namespace Carlton.Core.Components.Flux
@implements IDataWrapper
@implements IDisposable
@typeparam TViewModel
@typeparam TState
@inject IConnectedComponent<TViewModel> Component
@inject IViewModelQueryDispatcher<TState> QueryDispatcher
@inject ICommandMutationDispatcher<TState> CommandDispatcher
@inject IFluxStateObserver<TState> StateStore
@inject ILogger<ConnectedWrapper<TViewModel, TState>> Logger

<DynamicComponent Type="WrappedComponentType" Parameters="GetParameters()" />


@code {
    public Object State { get => StateStore; }

    public Type WrappedComponentType { get => Component.GetType(); }

    public string WrappedComponentDisplayName { get => WrappedComponentType.GetDisplayName(); }

    public TViewModel ViewModel { get; private set; }

    public IEnumerable<string> ObserveableStateEvents { get; private set; } = new List<string>();

    protected async override Task OnInitializedAsync()
    {
        //Register State Changed Handler
        StateStore.StateChanged += OnStateChanged;

        //Get VM and initalize context for wrapped component
        ViewModel = await GetViewModel();

        //Gather the StateEvents this component should be listening for
        var attributes = WrappedComponentType.GetCustomAttributes<ObserveStateEventsAttribute>();
        ObserveableStateEvents = attributes.Select(_ => _.StateEvent);

        //Continue initilization
        await base.OnInitializedAsync();
    }

    protected async virtual Task<TViewModel> GetViewModel()
    {
        var query = new ViewModelQuery();
        return await QueryDispatcher.Dispatch<TViewModel>(query, CancellationToken.None);
    }

    protected async Task OnComponentEvent<TCommand>(object sender, TCommand command)
    {
        await CommandDispatcher.Dispatch((dynamic) command, CancellationToken.None);
    }

    protected virtual async Task<bool> OnStateChanged(string stateEvent)
    {
        if(!ObserveableStateEvents.Contains(stateEvent))
            return false;
  
        ViewModel = await GetViewModel();
        StateHasChanged();
        return true;
    }

    protected virtual Dictionary<string, object> GetParameters()
    {
        var eventCallback = EventCallback.Factory.Create<MutationCommand>(this, (command) => OnComponentEvent(Component, command));
        return new Dictionary<string, object>
            {
                { "ViewModel", ViewModel },
                { "GetViewModel", async () => await GetViewModel() },
                { "OnComponentEvent", eventCallback }
            };
    }

    public void Dispose()
    {
        StateStore.StateChanged -= OnStateChanged;
    }
}