@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@namespace Carlton.Core.Flux.Components
@typeparam TState
@typeparam TViewModel
@inherits FluxWrapper<TState, TViewModel>
@inject IJSRuntime JsRuntime;
@inject ILogger<InteropFluxComponent<TViewModel, TState>> Logger;

@if (IsLoading)
{
    @SpinnerContent
}
else
{
    <DynamicComponent Type="WrappedComponentType" Parameters="GetParameters()" />
}


@code {
    private const string Import = "import";

    [Parameter]
    public string JsModule { get; set; }
    [Parameter]
    public string JsFunction { get; set; }
    [Parameter]
    public object[] JsParameters { get; set; }

    protected override async Task<TViewModel> GetViewModel()
    {
        var vmType = typeof(TViewModel).GetDisplayName();
        using (Logger.BeginScope(FluxLogs.BeginJsInteropLoggingScopes(Logger, JsModule, JsFunction, JsParameters)))
        {
            try
            {
                throw new JSException("error");
                await using var module = await JsRuntime.InvokeAsync<IJSObjectReference>(Import, JsModule);
                var result = await module.InvokeAsync<TViewModel>(JsFunction, CancellationToken.None, JsParameters);
                Logger.ViewModelJsInteropQueryCompleted(vmType);
                return result;
            }
            catch (JSException ex)
            {
                Logger.ViewModelJsInteropQueryErrored(ex, vmType);
                throw;
            }
        }
    }
}



