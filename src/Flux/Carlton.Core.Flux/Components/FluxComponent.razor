@namespace Carlton.Core.Flux.Components
@typeparam TState
@typeparam TViewModel
@implements IDisposable
@inject IConnectedComponent<TViewModel> Component
@inject IViewModelQueryDispatcher<TState> QueryDispatcher
@inject IMutationCommandDispatcher<TState> MutationDispatcher
@inject IFluxStateObserver<TState> StateObserver
@inject ILogger<FluxComponent<TState, TViewModel>> Logger

<FluxErrorBoundary TComponent="TViewModel">
    <ChildContent>
        @if (IsLoading)
        {
            @SpinnerContent
        }
        else
        {
            <DynamicComponent Type="WrappedComponentType" Parameters="GetParameters()" />
        }
    </ChildContent>
    <ErrorPrompt Context="error">
        @ErrorContent(error)
    </ErrorPrompt>
</FluxErrorBoundary>


@code {
    [Parameter]
    public RenderFragment SpinnerContent { get; set; }
    [Parameter]
    public RenderFragment<ExceptionErrorPrompt> ErrorContent { get; set; }

    public Type WrappedComponentType { get => Component.GetType(); }

    public string WrappedComponentDisplayName { get => WrappedComponentType.GetDisplayName(); }

    public TViewModel ViewModel { get; private set; }

    public IEnumerable<string> ObservableStateEvents { get; private set; } = new List<string>();

    public bool IsLoading { get; private set; }

    private string ViewModelDisplayName { get => typeof(TViewModel).GetDisplayName(); }

    protected async override Task OnInitializedAsync()
    {
        var context = new ViewModelQueryContext<TViewModel>();
        var scopes = LogEvents.GetFluxComponentInitalizationLoggingScopes(Logger, context);
        using (scopes)
        {
            //Set IsLoading to true
            IsLoading = true;

            //Register State Changed Handler
            StateObserver.StateChanged += OnStateChanged;

            //Get VM and initialize context for wrapped component
            ViewModel = await GetViewModelInternal(context);

            //Gather the StateEvents this component should be listening for
            var attributes = WrappedComponentType.GetCustomAttributes<ObserveStateEventsAttribute>();
            ObservableStateEvents = attributes.Select(_ => _.StateEvent);

            //Set IsLoading to false
            IsLoading = false;

            //Continue initialization
            await base.OnInitializedAsync();

            //Log Init Completed
            Logger.DataWrapperOnInitializedCompleted(WrappedComponentDisplayName);
        }
    }

    protected virtual async Task<TViewModel> GetViewModel()
    {
        return await GetViewModelInternal(new ViewModelQueryContext<TViewModel>());
    }

    private async Task<TViewModel> GetViewModelInternal(ViewModelQueryContext<TViewModel> context)
    {
        var scopes = LogEvents.GetFluxComponentViewModelLoggingScopes(Logger, context);
        using (scopes)
        {
            var viewmodle = await QueryDispatcher.Dispatch<TViewModel>(Component, context, CancellationToken.None);
            return viewmodle;
        }
    }

    protected async Task OnComponentEvent<TCommand>(object sender, TCommand command)
    {
        var context = new MutationCommandContext<TCommand>(command);
        await MutationDispatcher.Dispatch(Component, (dynamic)context, CancellationToken.None);
    }

    private async Task OnStateChanged(FluxStateChangedEventArgs args)
    {
        //State does not require refresh
        if (!ObservableStateEvents.Contains(args.StateEvent))
            return;

        var scopes = LogEvents.GetFluxComponentStateChangedLogginScopes(Logger, args);
        using (scopes)
        {
            //Set loading true
            IsLoading = true;

            //Child Context
            var childContext = new ViewModelQueryContext<TViewModel>();
            args.Context.AddChildContext(childContext);

            //Refresh ViewModel
            ViewModel = await GetViewModelInternal(childContext);

            //Set loading false
            IsLoading = false;

            //StateHasChanged
            StateHasChanged();
        }
    }

    protected IDictionary<string, object> GetParameters()
    {
        var eventCallback = EventCallback.Factory.Create(this, (command) => OnComponentEvent(Component, command));
        return new Dictionary<string, object>
        {
                { "ViewModel", ViewModel },
                { "GetViewModel", async () => await GetViewModel() },
                { "OnComponentEvent", eventCallback }
        };
    }

    public void Dispose()
    {
        StateObserver.StateChanged -= OnStateChanged;
    }
}