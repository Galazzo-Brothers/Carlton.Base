@using Carlton.Core.Flux.Components.ErrorComponents
@namespace Carlton.Core.Flux.Components
@typeparam TState
@typeparam TViewModel
@inject ILogger<InteropFluxComponent<TState, TViewModel>> Logger

@*
	Represents a component that wraps an InteropFluxWrapper component within a FluxErrorBoundary.
	This component handles errors and displays a spinner while waiting for asynchronous operations.
*@
<FluxErrorBoundary ErrorPrompt="ErrorPrompt">
    <ChildContent>
        <InteropFluxWrapper TState="TState" 
            TViewModel="TViewModel"
            SpinnerContent="SpinnerContent"
            JsModule="@JsModule"
            JsFunction="@JsFunction"
            JsParameters="@JsParameters"/>
    </ChildContent>
</FluxErrorBoundary>

@code {
	/// <summary>
	/// Gets or sets the content to display while waiting for asynchronous operations.
	/// </summary>
	[Parameter]
    public RenderFragment SpinnerContent { get; set; }

	/// <summary>
	/// Gets or sets the render fragment for displaying the error prompt.
	/// </summary>
	[Parameter]
    public RenderFragment<ErrorPromptModel> ErrorPrompt { get; set; }

	/// <summary>
	/// Gets or sets the JavaScript module name.
	/// </summary>
	[Parameter]
    public string JsModule { get; set; }

	/// <summary>
	/// Gets or sets the JavaScript function name.
	/// </summary>
	[Parameter]
    public string JsFunction { get; set; }

	/// <summary>
	/// Gets or sets the parameters to pass to the JavaScript function.
	/// </summary>
	[Parameter]
    public object[] JsParameters { get; set; }
}




