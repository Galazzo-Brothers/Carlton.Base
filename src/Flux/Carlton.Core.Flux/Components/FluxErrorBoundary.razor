@namespace Carlton.Core.Flux.Components
@typeparam TComponent
@inherits ErrorBoundary
@inject ILogger<FluxErrorBoundary<TComponent>> Logger
@inject IFluxExceptionDisplayService ExceptionDisplayService
@inject IComponentExceptionLoggingService ComponentExceptionLoggingService


@if (ShowErrorContent)
{
    @ErrorPrompt(ErrorPromptModel)
}
else
{
    @ChildContent
}

@code {
    [Parameter]
    public RenderFragment<ExceptionErrorPrompt> ErrorPrompt { get; set; }


    private bool ShowErrorContent { get => base.CurrentException != null; }

    private ExceptionErrorPrompt ErrorPromptModel { get; set; }

    protected override void OnParametersSet()
    {
        ComponentExceptionLoggingService.LogException(Logger, base.CurrentException, typeof(TComponent));
        base.OnParametersSet();
    }

    protected override Task OnErrorAsync(Exception exception)
    {
        ErrorPromptModel = ExceptionDisplayService.GetExceptionErrorPrompt(exception, base.Recover);
        ComponentExceptionLoggingService.LogException(Logger, exception, typeof(TComponent));
        return base.OnErrorAsync(exception);
    }
}





