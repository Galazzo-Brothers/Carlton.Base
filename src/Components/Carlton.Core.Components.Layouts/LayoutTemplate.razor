@using Carlton.Core.Components.Modals
@using Carlton.Core.Components.Layouts.Modals
@using Carlton.Core.Components.Layouts.State.FullScreen
@using Carlton.Core.Components.Layouts.State.Modals
@using Carlton.Core.Components.Layouts.State.Theme
@using Carlton.Core.Layouts.Components.Notifications
@namespace Carlton.Core.Components.Layouts
@implements IDisposable
@inject IFullScreenState NavMenuState
@inject IThemeState ThemeState
@inject IModalState ModalState

<div class="@LayoutContainerCss" data-theme="@ThemeState.Theme.ToString()">
    <header>
        @* <NotificationBar @ref="NotificationBarRef" IsTestMode="false" FadeOutEnabled="true" Top="10" Right="10" /> *@
        @HeaderContent
    </header>
    <nav>
        @NavContent
    </nav>
    <main>
        @Body
        <button @onclick="RaiseModal">Modal Test</button>
    </main>
    <footer class="@LayoutFooterCss">
        @FooterContent
    </footer>
</div>

<LayoutModal 
    ModalType="ModalType"
    ViewModel="ModalState.ModalModel"
    ModalDismissed="ModalState.ModalModel.DismissModal"
    ModalClosed="ModalState.ModalModel.CloseModal"/>

@* 
<ConfirmationModal ViewModel="ModalState.ModalModel"
                   ModalDismissed="ModalState.ModalModel.DismissModal"
                   ModalClosed="ModalState.ModalModel.CloseModal"/>  *@

@code {
    [Parameter]
    public RenderFragment HeaderContent { get; set; }
    [Parameter]
    public RenderFragment NavContent { get; set; }
    [Parameter]
    public RenderFragment Body { get; set; }
    [Parameter]
    public RenderFragment FooterContent { get; set; }
    [Parameter]
    public bool IsFixedFooter { get; set; }

    private Type ModalType { get; set; }

    // private NotificationBar NotificationBarRef { get; set; }
    // private Action<string, string, NotificationType> GenerateNotificationAct { get; set; }

    private void RaiseModal()
    {
        var model = new ModalViewModel(true, "Testing", "This is a test", () =>
        {
            return Task.CompletedTask;
        },
        obj =>
        {
            return Task.CompletedTask;
        });

        ModalState.RaiseModal<SingleActionModal>(model);
    }

    protected override void OnInitialized()
    {
        NavMenuState.FullScreenStateChanged += OnLayoutChanged;
        ThemeState.ThemeChanged += OnThemeChanged;
        ModalState.ModalRaised += OnModalRaised;
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // if (firstRender)
        // {
        //     // GenerateNotificationAct = NotificationBarRef.GenerateNotification;
        //     StateHasChanged();
        // }

        base.OnAfterRender(firstRender);
    }

    private void OnLayoutChanged(object sender, FullScreenStateChangedEventArgs args)
        => StateHasChanged();


    private void OnThemeChanged(object sender, ThemeChangedEventArgs args)
        => StateHasChanged();

    private void OnModalRaised(object sender, ModalRaisedEventArgs args)
    {
        ModalType = args.ModalType;
        StateHasChanged();
    }

    private string LayoutContainerCss
    {
        get => new CssBuilder("layout-container")
                .AddClass("collapsed", NavMenuState.IsFullScreen)
                .Build();
    }

    private string LayoutFooterCss
    {
        get => new CssBuilder("footer")
                .AddClass("fixed", IsFixedFooter)
                .Build();
    }

    public void Dispose()
    {
        NavMenuState.FullScreenStateChanged -= OnLayoutChanged;
        ThemeState.ThemeChanged -= OnThemeChanged;
        ModalState.ModalRaised -= OnModalRaised;
    }
}