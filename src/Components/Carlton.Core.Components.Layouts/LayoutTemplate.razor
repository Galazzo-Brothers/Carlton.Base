@using Carlton.Core.Components.Modals
@using Carlton.Core.Components.Toasts
@using Carlton.Core.Components.Layouts.Modals
@using Carlton.Core.Components.Layouts.Toasts
@using Carlton.Core.Components.Layouts.State.FullScreen
@using Carlton.Core.Components.Layouts.State.Modals
@using Carlton.Core.Components.Layouts.State.Theme
@using Carlton.Core.Components.Layouts.State.Toasts

@namespace Carlton.Core.Components.Layouts
@implements IDisposable
@inject IFullScreenState NavMenuState
@inject IThemeState ThemeState
@inject IModalState ModalState
@inject IToastState ToastState

<div class="@LayoutContainerCss" data-theme="@ThemeState.Theme.ToString()">
    <header>
        @HeaderContent
    </header>
    <nav>
        @NavContent
    </nav>
    <main>
        @Body
@*         <button @onclick="RaiseModal">Modal Test</button>
        <button @onclick="RaiseToast">Toast Test</button> *@
    </main>
    <footer class="@LayoutFooterCss">
        @FooterContent
    </footer>
    <LayoutToasater @ref="LayoutToaster"
                    IsTestMode="false"
                    FadeOutEnabled="true"
                    Top="50"
                    Right="10" />

    <LayoutModal ModalType="ModalState.ModalType"
                 ViewModel="ModalState.ModalModel"
                 ModalDismissed="ModalState.ModalModel.DismissModal"
                 ModalClosed="ModalState.ModalModel.CloseModal" />
</div>





@code {
    [Parameter]
    public RenderFragment HeaderContent { get; set; }
    [Parameter]
    public RenderFragment NavContent { get; set; }
    [Parameter]
    public RenderFragment Body { get; set; }
    [Parameter]
    public RenderFragment FooterContent { get; set; }
    [Parameter]
    public bool IsFixedFooter { get; set; }

    private LayoutToasater LayoutToaster { get; set; }


    private void RaiseModal()
    {
        var model = new ModalViewModel("Testing", "This is a test",
        () =>
        {
            return Task.CompletedTask;
        },
        obj =>
        {
            return Task.CompletedTask;
        });

        ModalState.RaiseModal<SingleActionModal>(model);
    }

    private void RaiseToast()
    {
        ToastState.RaiseToast("Some Toast", "This is a toast", ToastTypes.Success);
    }

    protected override void OnInitialized()
    {
        NavMenuState.FullScreenStateChanged += OnLayoutChanged;
        ThemeState.ThemeChanged += OnThemeChanged;
        ModalState.ModalRaised += OnModalRaised;
        ToastState.ToastAdded += OnToastRaised;
        base.OnInitialized();
    }

    private void OnLayoutChanged(object sender, FullScreenStateChangedEventArgs args)
        => StateHasChanged();


    private void OnThemeChanged(object sender, ThemeChangedEventArgs args)
        => StateHasChanged();

    private void OnModalRaised(object sender, ModalRaisedEventArgs args)
    {
        StateHasChanged();
    }

    private void OnToastRaised(object sender, ToastRaisedEventArgs args)
    {
        LayoutToaster.GenerateNotification(args.RaisedToast);
        StateHasChanged();
    }

    private string LayoutContainerCss
    {
        get => new CssBuilder("layout-container")
                .AddClass("collapsed", NavMenuState.IsFullScreen)
                .Build();
    }

    private string LayoutFooterCss
    {
        get => new CssBuilder("footer")
                .AddClass("fixed", IsFixedFooter)
                .Build();
    }

    public void Dispose()
    {
        NavMenuState.FullScreenStateChanged -= OnLayoutChanged;
        ThemeState.ThemeChanged -= OnThemeChanged;
        ModalState.ModalRaised -= OnModalRaised;
        ToastState.ToastAdded -= OnToastRaised;
    }
}