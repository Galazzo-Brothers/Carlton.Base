@using Carlton.Core.Components.Modals
@using Carlton.Core.Components.Toasts
@using Carlton.Core.Components.Layouts.Toasts
@using Carlton.Core.Components.Layouts.State.FullScreen
@using Carlton.Core.Components.Layouts.State.Modals
@using Carlton.Core.Components.Layouts.State.Theme
@using Carlton.Core.Components.Layouts.State.Toasts
@using Carlton.Core.Components.Layouts.State.LayoutSettings

@namespace Carlton.Core.Components.Layouts
@inherits LayoutComponentBase
@implements IDisposable
@inject IFullScreenState NavMenuState
@inject IThemeState ThemeState
@inject IModalState ModalState
@inject IToastState ToastState
@inject ILayoutSettings LayoutSettings

<div class="layout-manager" data-theme="@ThemeState.Theme.ToString()">
    <CascadingValue Value="LayoutState">
        @Body
    </CascadingValue>

    <LayoutToaster @ref="LayoutToaster"
                    FadeOutEnabled="true"
                    Top="50"
                    Right="10" />

    <Modal IsVisible="ModalState.IsVisible"
           ModalTypes="ModalState.ModalType"
           ModalPrompt="@ModalState?.ModalModel?.ModalPrompt"
           ModalMessage="@ModalState?.ModalModel?.ModalMessage"
           CloseModal="ModalState?.ModalModel?.CloseModal"
           DismissModal="ModalState?.ModalModel?.DismissModal" />
</div>


@code {
    private LayoutToaster LayoutToaster { get; set; }

    private LayoutManagerCascadingState LayoutState
    {
        get => new LayoutManagerCascadingState
            {
                IsFullScreen = NavMenuState.IsFullScreen,
                LayoutSettings = LayoutSettings.Settings
            };
    }

    protected override void OnInitialized()
    {
        NavMenuState.FullScreenStateChanged += OnLayoutChanged;
        ThemeState.ThemeChanged += OnThemeChanged;
        ModalState.ModalStateChanged += OnModalStateChanged;
        ToastState.ToastAdded += OnToastRaised;
        base.OnInitialized();
    }

    private void OnLayoutChanged(object? sender, FullScreenStateChangedEventArgs args)
        => StateHasChanged();

    private void OnThemeChanged(object? sender, ThemeChangedEventArgs args)
        => StateHasChanged();

    private void OnModalStateChanged(object? sender, ModalStateChangedEventArgs args)
        => StateHasChanged();

    private void OnToastRaised(object? sender, ToastRaisedEventArgs args)
        => LayoutToaster.GenerateNotification(args.RaisedToast);
    

    public void Dispose()
    {
        NavMenuState.FullScreenStateChanged -= OnLayoutChanged;
        ThemeState.ThemeChanged -= OnThemeChanged;
        ModalState.ModalStateChanged -= OnModalStateChanged;
        ToastState.ToastAdded -= OnToastRaised;
    }
}