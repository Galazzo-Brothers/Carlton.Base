@using Carlton.Core.Components.Toasts
@using Carlton.Core.Utilities.DataStructures
@namespace Carlton.Core.Components.Layouts.Toasts

<div class="layout-toaster">
    @if(IsTestMode)
    {
        <LayoutToasterTestPanel ToastIndex="ToastIndex" GenerateNotification="GenerateNotification" />
    }

    <div class="content" style="@ContentStyle">
        @foreach(var toast in ToastsCircularStack)
        {
            @if(!toast.IsDismissed)
            {
                <Toast Title="@toast.Title"
                       Message="@toast.Message"
                       ToastType="@toast.ToastType"
                       FadeOutEnabled="!toast.FadeOutEnabled"
                       IsDismissed="toast.IsDismissed"
                       OnDismissed="() => toast.MarkAsDismissed()" />
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public bool IsTestMode { get; set; }
    [Parameter]
    public bool FadeOutEnabled { get; set; }
    [Parameter]
    public int Top { get; set; }
    [Parameter]
    public int Right { get; set; }

    private const int MaxToastCount = 3;
    private int ToastIndex { get; set; }

    private CircularStack<ToastViewModel> ToastsCircularStack { get; } = new(MaxToastCount);

    public void GenerateNotification(ToastViewModel newToast)
    {
        ToastsCircularStack.Push(newToast);
        StateHasChanged();
    }

    private string ContentStyle
    {
        get => new StyleBuilder()
                .AddStyle("--toast-top", $"{Top}px")
                .AddStyle("--toast-right", $"{Right}px")
                .Build();
    }
}

