@using Microsoft.JSInterop
@namespace Carlton.Core.Components.Toasts
@inject IJSRuntime JS;

<div id="@ToastId" class="@ToastCss">
    <div class="content">
        <span class="@IconCss"></span>
        <div class="message-container">
            <span class="title">@ViewModel.Title</span>
            <span class="message">@ViewModel.Message</span>
        </div>
        <span class="@DismissCss" @onclick="@Dismiss"></span>
    </div>
</div>

@code {
    [Parameter]
    public ToastViewModel ViewModel { get; set; }

    [Parameter]
    public EventCallback OnToasted { get; set; }

    private bool IsDismissed { get; set; } = false;

    private string ToastId { get => $"toast-{ViewModel.ToastIndex}"; }

    protected override async Task OnParametersSetAsync()
    {
        IsDismissed = ViewModel.Toasted;
        var tasks = new List<Task>();

        if (ViewModel.FadeOutEnabled && !ViewModel.Toasted)
            IsDismissed = false;

        await base.OnParametersSetAsync();

        await Task.Run(async () =>
        {
            IsDismissed = true;
            await Task.Delay(3000);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await using (var module = await JS.InvokeAsync<IJSObjectReference>("import", $"./_content/{Constants.ProjectName}/Toasts/Toast.razor.js"))
                await module.InvokeAsync<Task>("initNewToast", DotNetObjectReference.Create(this), nameof(HandleDismiss), ViewModel.ToastIndex);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable("HandleDismiss")]
    public async Task HandleDismiss()
    {
        await OnToasted.InvokeAsync();
    }

    private string IconCss
    {
        get => new CssBuilder("icon")
                .AddClass("mdi mdi-24px")
                .AddClass("mdi-check-circle", ViewModel.ToastType == ToastTypes.Success)
                .AddClass("mdi-alert-circle-outline", ViewModel.ToastType == ToastTypes.Info)
                .AddClass("mdi-alert", ViewModel.ToastType == ToastTypes.Warning)
                .AddClass("mdi-alert-circle-outline", ViewModel.ToastType == ToastTypes.Error)
                .Build();

    }

    private string ToastCss
    {
        get => new CssBuilder("toast")
                .AddClass("success", ViewModel.ToastType == ToastTypes.Success)
                .AddClass("info", ViewModel.ToastType == ToastTypes.Info)
                .AddClass("warning", ViewModel.ToastType == ToastTypes.Warning)
                .AddClass("error", ViewModel.ToastType == ToastTypes.Error)
                .AddClass("dismissed", IsDismissed)
                .Build();
    }

    private string DismissCss
    {
        get => new CssBuilder("dismiss")
                .AddClass("mdi mdi-18px mdi-close")
                .Build();
    }

    private void Dismiss()
        => IsDismissed = true;
}