@namespace Carlton.Core.Components.Tabs

<div class="tab-bar">
    @if (!HideCollapser)
    {
        <button class="slide-button" @onclick="() => IsExpanded = !IsExpanded">@Title</button>
    }

    @if (ContentLocation == ContentLocations.Above)
    {
        <div class="@ContentCss">
            <CascadingValue Value="this">
                @ChildContent
            </CascadingValue>
        </div>
    }

    @if (!HideTabs)
    {
        <div class="tabs">
            @foreach (Tab tab in Tabs)
            {
                <div class="@TabCss(tab)">
                    <div class="tab-link" @onclick="(args) => ActivateTab(tab.TabIndex)">
                        @TabContent(tab)
                    </div>
                </div>
            }
        </div>
    }

    @if (ContentLocation == ContentLocations.Below)
    {
        <div class="@ContentCss">
            <CascadingValue Value="this">
                @ChildContent
            </CascadingValue>
        </div>
    }
</div>


@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool HideCollapser { get; set; } = false;

    [Parameter]
    public bool HideTabs { get; set; } = false;

    [Parameter]
    public ContentLocations ContentLocation { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool IsExpanded { get; set; }

    [Parameter]
    public RenderFragment<Tab> TabContent { get; set; } = DefaultTabRenderFragment;

    [Parameter]
    public int ActiveTabIndex { get; set; }

    private List<Tab> Tabs { get; } = new List<Tab>();

    private int TabCount => Tabs.Count();

    public Tab ActiveTab => Tabs.ElementAt(ActiveTabIndex);

    protected override void OnInitialized()
    {
        if (HideCollapser)
            IsExpanded = true;

        base.OnInitialized();
    }

    public void AddTab(Tab tab)
    {
        tab.TabIndex = TabCount;
        Tabs.Add(tab);
        StateHasChanged();
    }

    public void ActivateTab(int tabIndex)
        => ActiveTabIndex = tabIndex;
    
    private bool GetActiveState()
    {
        if (HideCollapser)
            //Collapser is hidden and component is being used as icon tabs
            return true;
        else
            //Collapser is visible and so content is conditionally shown based on state
            return IsExpanded;
    }

    private string ContentCss
         => new CssBuilder("content")
                .AddClass("expanded", GetActiveState())
                .Build();


    private string TabCss(Tab tab)
        => new CssBuilder("tab")
                .AddClass("active", tab.TabIndex == ActiveTabIndex)
                .Build();

    private static readonly RenderFragment<Tab> DefaultTabRenderFragment = (tab) => (builder) => { };
}














