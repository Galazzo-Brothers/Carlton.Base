@namespace Carlton.Core.Components.Accordion.AccordionSelectGroup
@using Carlton.Core.Components.Accordion.AccordionSelect
@typeparam TValue

@code {
	/// <summary>
	/// Gets or sets the collection of select groups to be displayed.
	/// </summary>
	[Parameter]
	public IEnumerable<AccordionSelectGroupModel<TValue>> Groups { get; set; }

	/// <summary>
	/// Gets or sets the index of the currently selected group.
	/// </summary>
	[Parameter]
	public int SelectedGroupIndex { get; set; } = 0;

	/// <summary>
	/// Gets or sets the index of the currently selected item within the group.
	/// </summary>
	[Parameter]
	public int SelectedItemIndex { get; set; } = 0;

	/// <summary>
	/// Event callback invoked when an item within a group is selected.
	/// </summary>
	[Parameter]
	public EventCallback<AccordionSelectGroupItemChangedEventArgs<TValue>> OnItemSelected { get; set; }

	/// <summary>
	/// Event callback invoked when the expansion state of a group changes.
	/// </summary>
	[Parameter]
	public EventCallback<AccordionSelectGroupExpansionChangeEventArgs> OnGroupExpansionChange { get; set; }

	/// <summary>
	/// Gets the value of the currently selected item.
	/// </summary>
	public TValue SelectedValue
	{
		get => (SelectedGroupIndex == -1 || SelectedItemIndex == -1) ? default :
		Groups.ElementAt(SelectedGroupIndex).Items.ElementAt(SelectedItemIndex).Value;
	}

	protected override void OnInitialized()
	{
		var indicesAreInvalid = SelectedGroupIndex < -1 || //Index less than -1 not allowed
								SelectedItemIndex < -1 || //Index less than -1 not allowed
								(!Groups.Any() && SelectedGroupIndex != -1) || //Empty groups must have index -1
								(Groups.Any() && SelectedGroupIndex > Groups.Count() - 1) || //Non-Empty groups must have index within group count
								(Groups.Any() && !Groups.ElementAt(SelectedGroupIndex).Items.Any() && SelectedItemIndex != -1) || //Empty items must have index -1
								(Groups.Any() && Groups.ElementAt(SelectedGroupIndex).Items.Any() && SelectedItemIndex > Groups.ElementAt(SelectedGroupIndex).Items.Count() - 1); //Non-Empty items must have index withi items count

		if (indicesAreInvalid)
			throw new ArgumentException("The provided index parameters are not valid.");

		base.OnInitialized();
	}

	protected int GetSelectedItemIndex(int groupIndex)
	{
		return groupIndex == SelectedGroupIndex ? SelectedItemIndex : -1;
	}

	protected async Task HandleGroupExpansionChange(int groupIndex, bool isExpanded)
	{
		var newGroups = Groups.ToList();
		newGroups[groupIndex] = newGroups[groupIndex] with { IsExpanded = isExpanded };
		Groups = newGroups;
		await OnGroupExpansionChange.InvokeAsync(new AccordionSelectGroupExpansionChangeEventArgs(groupIndex, isExpanded));
	}

	protected async Task HandleItemSelected(int groupIndex, int itemIndex, TValue value)
	{
		SelectedGroupIndex = groupIndex;
		SelectedItemIndex = itemIndex;
		await OnItemSelected.InvokeAsync(new AccordionSelectGroupItemChangedEventArgs<TValue>(groupIndex, itemIndex, value));
	}
}
