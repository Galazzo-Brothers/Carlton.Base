@namespace Carlton.Core.Components.Consoles

@* Represents a JSON viewer console component for displaying and interacting with JSON data. *@
<div class="json-viewer-console">
	<Console Text="@CurrentText"
			 IsReadOnly="@IsReadOnly"
			 IsValid="@IsValid"
			 OnValueChange="HandleValueChange" />
</div>


@code {
	/// <summary>
	/// Gets or sets the object to be displayed as JSON in the console.
	/// </summary>
	[Parameter]
	public object Object { get; set; } = new object();

	/// <summary>
	/// Gets or sets a value indicating whether the console is read-only.
	/// </summary>
	[Parameter]
	public bool IsReadOnly { get; set; }

	/// <summary>
	/// Event callback invoked when the value of the console changes.
	/// </summary>
	[Parameter]
	public EventCallback<JsonViewerConsoleValue> OnValueChange { get; set; }

	private bool IsValid { get; set; } = true;

	private object CurrentObject { get; set; }
	
	private string CurrentText { get; set; }

	protected override void OnParametersSet()
	{
		if (Object == CurrentObject)
			return;

		IsValid = true;
		CurrentObject = Object;
		CurrentText = Object == null ? string.Empty : JsonSerializer.Serialize(Object, new JsonSerializerOptions { WriteIndented = true });
		base.OnParametersSet();
	}

	public void Reset()
	{
		CurrentText = JsonSerializer.Serialize(Object, new JsonSerializerOptions { WriteIndented = true });
		IsValid = true;
	}

	private async Task HandleValueChange(string vmStr)
	{
		try
		{
			//Parse New ViewModel String
			var type = Object.GetType();
			var deserializedObj = JsonSerializer.Deserialize(vmStr, type);
			IsValid = true;

			//If Parse succeeds Send ComponentEvent
			await OnValueChange.InvokeAsync(new JsonViewerConsoleValue(IsValid, deserializedObj));
		}
		catch (Exception)
		{
			IsValid = false;
			await OnValueChange.InvokeAsync(new JsonViewerConsoleValue(IsValid, null));
		}
	}
}
