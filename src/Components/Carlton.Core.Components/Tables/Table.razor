@namespace Carlton.Core.Components.Tables
@typeparam TItem

<div class="@TableCssClass">
    <div class="header table-row">
        <TableHeader TItem="TItem"
                     Headings="Headings"
                     SelectedOrderColumn="@OrderColumn"
                     OrderAscending="OrderAscending"
                     OnItemsSort="(args)=>HandleItemsSort(args)" />
    </div>
    <div class="body">
        @foreach (var item in Items)
        {
            @RowTemplate(item)
        }
    </div>
    @if (ShowPaginationRow)
    {
        <div class="pagination table-row">
            <TablePaginationRow TItem="TItem"
                                RowsPerPageOpts="RowsPerPageOpts"
                                TotalItemCount="AllItems.Count()"
                                CurrentPage="CurrentPage"
                                SelectedRowsPerPageIndex="SelectedRowsPerPageIndex"
                                OnPageChange="OnPageChange"
                                OnRowsPerPageChange="OnRowsPerPageChange" />
        </div>
    }
</div>

@code {
    [Parameter]
    public IEnumerable<TableHeadingItem> Headings { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = new List<TItem>();

    [Parameter]
    public RenderFragment<TItem> RowTemplate { get; set; }

    [Parameter]
    public bool ZebraStripped { get; set; }

    [Parameter]
    public bool Hoverable { get; set; }

    [Parameter]
    public bool ShowPaginationRow { get; set; }

    [Parameter]
    public IEnumerable<int> RowsPerPageOpts { get; set; }

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public int SelectedRowsPerPageIndex { get; set; } = 0;

    [Parameter]
    public bool SortableHeadersEnabled { get; set; } = true;

    [Parameter]
    public string OrderColumn { get; set; } = string.Empty;

    [Parameter]
    public bool OrderAscending { get; set; } = true;

    [Parameter]
    public EventCallback<PageChangeEventArgs> OnPageChange { get; set; }

    [Parameter]
    public EventCallback<RowsPerPageChangeEventArgs> OnRowsPerPageChange { get; set; }

    [Parameter]
    public EventCallback<ItemsSortEventArgs> OnItemsSort { get; set; }

    private IList<TItem> AllItems { get; set; } = new List<TItem>();

    private int SelectedRowPerPageValue { get => RowsPerPageOpts.ElementAt(SelectedRowsPerPageIndex); }

    private string TableCssClass
    {
        get => new CssBuilder("table-container")
                .AddClass("zebra", ZebraStripped)
                .AddClass("hoverable", Hoverable)
                .Build();
    }

    protected override void OnParametersSet()
    {
        AllItems = Items.ToList();
        UpdateOrdering();
        UpdatePagination();
        base.OnParametersSet();
    }

    private void HandleItemsSort(ItemsSortEventArgs args)
    {
        if (!SortableHeadersEnabled)
            return;

        OrderColumn = args.SortColumn;
        OrderAscending = args.SortAscending;
        UpdateOrdering();
        OnItemsSort.InvokeAsync(args);
    }

    private void UpdatePagination()
    {
        if (!ShowPaginationRow)
            return;

        Items = AllItems.Skip((CurrentPage - 1) * SelectedRowPerPageValue)
                        .Take(SelectedRowPerPageValue)
                        .ToList();
    }

    private void UpdateOrdering()
    {
        if (string.IsNullOrEmpty(OrderColumn))
            return;

        var orderString = $"{OrderColumn}{(OrderAscending ? string.Empty : " desc")}";
        Items = AllItems.AsQueryable().OrderBy(orderString).ToList();
    }
}
