@using Carlton.Core.Foundation.State
@namespace Carlton.Core.Components.Tables
@typeparam TItem

@*
    Represents a reusable table component for displaying tabular data with sortable headers and pagination.
    TItem: The type of items in the table.
*@
<div class="@TableCssClass">
	<!--Table Header-->
	<TableHeader TItem="TItem"
				 Headings="Headings"
				 SelectedOrderColumn="@OrderColumn"
				 IsAscending="IsAscending"
				 OnItemsSort="HandleItemsSort" />


	<!--Table Body-->
	<div class="body">
		@foreach (var item in Items)
		{
			@RowTemplate(item)
		}
	</div>

	<!--Table Pagination Row-->
	@if (ShowPaginationRow)
	{
		<TablePaginationRow TItem="TItem"
							RowsPerPageOpts="RowsPerPageOpts"
							TotalItemCount="AllItems.Count()"
							CurrentPage="CurrentPage"
							SelectedRowsPerPageIndex="SelectedRowsPerPageIndex"
							OnPageChange="HandlePageChange"
							OnRowsPerPageChange="HandleRowsPerPageChange" />
	}
</div>

@code {
	/// <summary>
	/// Gets or sets the headings for the table columns.
	/// </summary>
	[Parameter]
	public IEnumerable<TableHeadingItem> Headings { get; set; }

	/// <summary>
	/// Gets or sets the items to be displayed in the table.
	/// </summary>
	[Parameter]
	public IEnumerable<TItem> Items { get; set; } = new List<TItem>();

	/// <summary>
	/// Gets or sets the template for rendering each row in the table.
	/// </summary>
	[Parameter]
	public RenderFragment<TItem> RowTemplate { get; set; }

	/// <summary>
	/// Gets or sets a value indicating whether zebra-striped styling should be applied to the table rows.
	/// </summary>
	[Parameter]
	public bool ZebraStripped { get; set; }

	/// <summary>
	/// Gets or sets a value indicating whether hoverable styling should be applied to the table rows.
	/// </summary>
	[Parameter]
	public bool Hoverable { get; set; }

	/// <summary>
	/// Gets or sets a value indicating whether the pagination row should be displayed.
	/// </summary>
	[Parameter]
	public bool ShowPaginationRow { get; set; }

	/// <summary>
	/// Gets or sets the options for the number of rows per page.
	/// </summary>
	[Parameter]
	public IEnumerable<int> RowsPerPageOpts { get; set; }

	/// <summary>
	/// Gets or sets a value indicating whether sortable headers are enabled.
	/// </summary>
	[Parameter]
	public bool SortableHeadersEnabled { get; set; } = true;

	/// <summary>
	/// Gets or Sets a value representing the users interaction state of the table, used to rehydrate the table on initialization.
	/// </summary>
	[Parameter]
	public TableState TableState { get; set; }

	/// <summary>
	/// Event callback invoked when the page changes.
	/// </summary>
	[Parameter]
	public EventCallback<PageChangeEventArgs> OnPageChange { get; set; }

	/// <summary>
	/// Event callback invoked when the rows per page value changes.
	/// </summary>
	[Parameter]
	public EventCallback<RowsPerPageChangeEventArgs> OnRowsPerPageChange { get; set; }

	/// <summary>
	/// Event callback invoked when the items are sorted.
	/// </summary>
	[Parameter]
	public EventCallback<ItemsSortEventArgs> OnItemsSort { get; set; }

	private IList<TItem> AllItems { get; set; } = new List<TItem>();

	private int SelectedRowPerPageValue { get => RowsPerPageOpts.ElementAt(SelectedRowsPerPageIndex); }

	private int CurrentPage { get; set; } = 1;

	private int SelectedRowsPerPageIndex { get; set; } = 0;

	private string OrderColumn { get; set; } = string.Empty;

	private bool IsAscending { get; set; } = true;

	protected override void OnInitialized()
	{
		if (TableState == null)
			return;

		//Rehydrate the table from the user's interaction state
		CurrentPage = TableState.CurrentPage;
		SelectedRowsPerPageIndex = TableState.SelectedRowsPerPageOptsIndex;
		OrderColumn = TableState.OrderByColum;
		IsAscending = TableState.IsAscending;

		base.OnInitialized();
	}

	protected override void OnParametersSet()
	{
		//Reset the current page if the items have changed
		if(!Enumerable.SequenceEqual(Items, AllItems))
			CurrentPage = 1;

		AllItems = Items.ToList();
		UpdateOrdering();
		UpdatePagination();
		base.OnParametersSet();
	}

	private void UpdateOrdering()
	{
		if (string.IsNullOrEmpty(OrderColumn))
			return;

		var orderString = $"{OrderColumn}{(IsAscending ? string.Empty : " desc")}";
		Items = AllItems.AsQueryable().OrderBy(orderString).ToList();
	}

	private void UpdatePagination()
	{
		if (!ShowPaginationRow)
			return;

		Items = Items.Skip((CurrentPage - 1) * SelectedRowPerPageValue)
						.Take(SelectedRowPerPageValue)
						.ToList();
	}

	private void HandleItemsSort(ItemsSortEventArgs args)
	{
		if (!SortableHeadersEnabled)
			return;

		if (OrderColumn == args.SortColumn && IsAscending == args.SortAscending)
			return;

		CurrentPage = 1; //reset to first page
		OrderColumn = args.SortColumn;
		IsAscending = args.SortAscending;
		OnItemsSort.InvokeAsync(args);
	}

	private void HandlePageChange(PageChangeEventArgs args)
	{
		if (!ShowPaginationRow)
			return;

		CurrentPage = args.CurrentPage;
		OnPageChange.InvokeAsync(args);
	}

	private void HandleRowsPerPageChange(RowsPerPageChangeEventArgs args)
	{
		if (!ShowPaginationRow)
			return;

		CurrentPage = 1; //reset to first page
		SelectedRowsPerPageIndex = args.SelectedRowsPerPageIndex;
		OnRowsPerPageChange.InvokeAsync(args);
	}

	private string TableCssClass
	{
		get => new CssBuilder("table-container")
				.AddClass("zebra", ZebraStripped)
				.AddClass("hoverable", Hoverable)
				.Build();
	}
}
