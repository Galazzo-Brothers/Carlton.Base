@namespace Carlton.Core.Components.Tables
@typeparam TItem

@*
    Represents the header of the table, displaying the column headings.
    TItem: The type of items in the table.
*@

<div class="header-row table-row">
    @foreach (var (heading, i) in Headings.WithIndex())
    {
        <div class="@HeaderCellCss(heading.OrderingName, i)" @onclick="()=>HandleItemsSort(heading.OrderingName)">
            <div class="heading-container">
                <span class="heading-text">@heading.DisplayName</span>
                <div class="sort-arrows">
                    <span class="arrow-ascending mdi mdi-arrow-up"></span>
                    <span class="arrow-descending mdi mdi-arrow-down"></span>
                </div>
            </div>
        </div>
    }
</div>

@code {
    /// <summary>
    /// Gets or sets the list of headings for the table columns.
    /// </summary>
    [Parameter]
    public IEnumerable<TableHeadingItem> Headings { get; set; }

    /// <summary>
    /// Gets or sets the name of the currently selected order column.
    /// </summary>
    [Parameter]
    public string SelectedOrderColumn { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets a value indicating whether the sorting order is ascending.
    /// </summary>
    [Parameter]
	public bool IsAscending { get; set; } = true;

    /// <summary>
    /// Gets or sets the callback invoked when the items in the table are sorted.
    /// </summary>
    [Parameter]
    public EventCallback<ItemsSortEventArgs> OnItemsSort { get; set; }

    protected override void OnInitialized()
    {
        var allowableOrderingColumns = Headings.Select(_ => _.OrderingName).Append(string.Empty);

        if (!allowableOrderingColumns.Contains(SelectedOrderColumn))
            throw new ArgumentException($"Attempting to order the table by a non-existent column: {SelectedOrderColumn}");

        base.OnInitialized();
    }

    private string HeaderCellCss(string column, int index)
    {
        return new CssBuilder("header-cell")
                .AddClass("table-cell")
                .AddClass("selected", SelectedOrderColumn == column)
				.AddClass("ascending", IsAscending)
				.AddClass("descending", !IsAscending)
                .AddClass($"heading-{index}")
                .Build();
    }

    private async Task HandleItemsSort(string selectedOrderColumn)
    {
		IsAscending = (SelectedOrderColumn == selectedOrderColumn) ? !IsAscending : true;
        SelectedOrderColumn = selectedOrderColumn;

        //If no order column is specified
        //do not trigger an ordering
        if (string.IsNullOrEmpty(SelectedOrderColumn))
            return;

		await OnItemsSort.InvokeAsync(new ItemsSortEventArgs(SelectedOrderColumn, IsAscending));
    }
}
