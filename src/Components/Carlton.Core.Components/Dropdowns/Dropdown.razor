@namespace Carlton.Core.Components.Dropdowns
@typeparam T

<div class="dropdown">
    <input readonly placeholder=" " value="@((IsPristineEnabled && IsPristine) ? null : SelectedKey)" />
    <div class="label">@Label</div>

    @if (IsDisabled)
    {
        <div disabled class="options"></div>
    }
    else
    {
        <div class="options">
            @foreach (var (opt, i) in Options.WithIndex())
            {
                <div class="option" @onclick="()=>OnValueChanged(new DropdownValueChangedArgs<T>(i, opt.Key, opt.Value))">@opt.Key</div>
            }
        </div>
    }
</div>


@code {
    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public IReadOnlyDictionary<string, T> Options { get; set; } = new Dictionary<string, T>();

    [Parameter]
    public EventCallback<DropdownValueChangedArgs<T>> ValueChangedCallback { get; set; }

    [Parameter]
    public int SelectedIndex { get; set; }

    [Parameter]
    public bool IsPristineEnabled { get; set; }

    private bool IsPristine { get; set; } = true;

    public string SelectedKey => Options.Any() ? Options.ElementAt(SelectedIndex).Key : default;

    public T SelectedValue => Options.Any() ? Options.ElementAt(SelectedIndex).Value : default;

    protected override void OnInitialized()
    {
        if (SelectedIndex < 0 || SelectedIndex >= Options.Count)
            throw new ArgumentException("SelctedIndex must be greater than 0 and less than the options count");

            base.OnInitialized();
    }

    protected async Task OnValueChanged(DropdownValueChangedArgs<T> opt)
    {
        IsPristine = false;
        SelectedIndex = opt.SelectedIndex;
        await ValueChangedCallback.InvokeAsync(opt);
    }
}