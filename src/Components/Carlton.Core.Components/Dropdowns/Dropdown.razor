@namespace Carlton.Core.Components.Select

<div class="select">
    <input readonly placeholder=" " value="@ValueDisplay" />
    <div class="label">@Label</div>

    @if(IsDisabled)
    {
        <div disabled class="options"></div>
    }
    else
    {
        <div class="options">
            @foreach(var (opt, i) in Options.WithIndex())
            {
                <div class="option" @onclick="()=>OnValueChanged(new DropdownValueChangedArgs(i, opt.Key, opt.Value))">@opt.Key</div>
            }
        </div>
    }
</div>


@code{
    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public IReadOnlyDictionary<string, int> Options { get; set; } = new Dictionary<string, int>();

    [Parameter]
    public EventCallback<DropdownValueChangedArgs> ValueChangedCallback { get; set; }

    [Parameter]
    public int SelectedValue { get; set; }

    private string ValueDisplay
    {
        get
        {
            return Options.FirstOrDefault(_ => _.Value == SelectedValue).Key;
        }
    }

    private async Task OnValueChanged(DropdownValueChangedArgs opt)
    {
        SelectedValue = opt.SelectedValue;
        await ValueChangedCallback.InvokeAsync(opt);
    }
}