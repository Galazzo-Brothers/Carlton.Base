@namespace Carlton.Core.Components.Dropdowns
@typeparam T

@* Represents a dropdown component for selecting from a list of options. *@
<div class="dropdown">
    <!-- Input holding dropdown selected value -->
    <input readonly class="@DropdownInputCss" placeholder=" " value="@DropdownValue" />

    <!-- Label for the dropdown -->
    <div class="label">@Label</div>

    <!-- Options container -->
    @if (IsDisabled)
    {
        <!-- Disabled state for options when the dropdown is disabled -->
        <div disabled class="options"></div>
    }
    else
    {
        <!-- Render options when the dropdown is not disabled -->
        <div class="options">
            @foreach (var (opt, i) in Options.WithIndex())
            {
                <!-- Individual option items -->
                <div class="option" @onclick="()=>HandleValueChange(new ValueChangeArgs<T>(i, opt.Key, opt.Value))">@opt.Key</div>
            }
        </div>
    }
</div>


@code {
    /// <summary>
    /// Gets or sets a value indicating whether the dropdown is disabled.
    /// </summary>
    [Parameter]
    public bool IsDisabled { get; set; }

    /// <summary>
    /// Gets or sets the label displayed above the dropdown.
    /// </summary>
    [Parameter]
    public string Label { get; set; }

    /// <summary>
    /// Gets or sets the options available in the dropdown.
    /// </summary>
    [Parameter]
    public IReadOnlyDictionary<string, T> Options { get; set; } = new Dictionary<string, T>();

    /// <summary>
    /// Gets or sets the index of the selected option.
    /// </summary>
    [Parameter]
    public int SelectedIndex { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the pristine state is enabled.
    /// </summary>
    [Parameter]
    public bool IsPristineEnabled { get; set; }

    /// <summary>
    /// Event callback invoked when the value of the dropdown changes.
    /// </summary>
    [Parameter]
    public EventCallback<ValueChangeArgs<T>> OnValueChange { get; set; }

    private bool IsPristine { get; set; } = true;

    public string SelectedKey => Options.Any() ? Options.ElementAt(SelectedIndex).Key : default;

    public T SelectedValue => Options.Any() ? Options.ElementAt(SelectedIndex).Value : default;

    protected override void OnInitialized()
    {
        if (SelectedIndex < 0 || SelectedIndex >= Options.Count)
            throw new ArgumentException("SelctedIndex must be greater than 0 and less than the options count");

        base.OnInitialized();
    }

    protected async Task HandleValueChange(ValueChangeArgs<T> opt)
    {
        IsPristine = false;
        SelectedIndex = opt.SelectedIndex;
        await OnValueChange.InvokeAsync(opt);
    }

    private String DropdownInputCss =>
        new CssBuilder("dropdown-input")
        .AddClass("disabled", IsDisabled)
        .Build();

    private string DropdownValue =>
        (IsPristineEnabled && IsPristine) ? null : SelectedKey;
}