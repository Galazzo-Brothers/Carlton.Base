@namespace Carlton.Core.Components.Dropdowns
@typeparam T

@* Represents a dropdown menu component with customizable menu items and templates. *@
<div class="dropdown-menu" @onclick="() => IsActive = !IsActive">
    <div class="menu-template">@MenuTemplate</div>
    <div class="@DropdownMenuCss">
        <div class="header-template">@HeaderTemplate</div>
        <ul>
            @foreach (var item in MenuItems)
            {
                <li>
                    <span class="@MenuElementCss(item)"></span>
                    <a href="#" @onclick:preventDefault="true" @onclick="item.MenuItemSelected">@item.MenuItemName</a>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    /// <summary>
    /// Gets or sets the collection of menu items to be displayed in the dropdown.
    /// </summary>
    [Parameter]
    public IEnumerable<DropdownMenuItem<T>> MenuItems { get; set; } = new List<DropdownMenuItem<T>>();

    /// <summary>
    /// Gets or sets the template for the menu content.
    /// </summary>
    [Parameter]
    public RenderFragment MenuTemplate { get; set; }

    /// <summary>
    /// Gets or sets the template for the header content.
    /// </summary>
    [Parameter]
    public RenderFragment HeaderTemplate { get; set; }

    protected bool IsActive { get; set; }

    private Func<DropdownMenuItem<T>, string> MenuElementCss
    {
        get => (item) => new CssBuilder()
                .AddClass($"mdi mdi-{item.MenuIcon}")
                .AddClass($"accent-color-{item.AccentColorIndex}")
                .Build();
    }

    private string DropdownMenuCss
    {
        get => new CssBuilder("dropdown-items")
            .AddClass("active", IsActive)
            .Build();
    }
}


