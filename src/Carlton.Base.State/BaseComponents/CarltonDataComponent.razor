@namespace Carlton.Base.State
@typeparam TViewModel
@typeparam TStateEvents where TStateEvents : Enum


<CarltonDataWrapper TViewModel="TViewModel" TStateEvents="TStateEvents" >
    <ChildComponent>
        <DynamicComponent Type="DynamicComponentType" Parameters="DynamicComponentParameters(context)" />
    </ChildComponent>
</CarltonDataWrapper>

@code {
    [Inject]
    private ICarltonComponent<TViewModel> CarltonComponent { get; set; }

    private Type DynamicComponentType
    {
        get
        {
            return CarltonComponent.GetType();
        }
    }

    private Dictionary<string, object> DynamicComponentParameters(CarltonDataWrapperContext<TViewModel> context)
    {
        var eventCallback = EventCallback.Factory.Create<ICommand>(this, (command) => context.OnComponentEvent(CarltonComponent, command));

        return new Dictionary<string, object>
            {
                {"ViewModel", context.ViewModel},
                {"OnComponentEvent", eventCallback}
            };
    }
}

