@namespace Carlton.Base.State
@inherits ErrorBoundaryBase
@typeparam TViewModel
@inject ILogger<WrappedComponentErrorBoundary<TViewModel>> Logger

@ChildContent

@code {
    public new Exception CurrentException => base.CurrentException;


    protected override Task OnErrorAsync(Exception exception)
    {
        //TODO There will be a new method called DispatchExceptionAsync
        //in the next version there will be a new method called DispatchExceptionAsync
        //that looks like it might allow us to wrap and rethrow the exception
        //await InvokeAsync(() => throw new DataComponentException<TViewModel>(CurrentException));
        Logger.LogError(exception, "");
        base.Recover();
        return Task.CompletedTask;  
    }
}
