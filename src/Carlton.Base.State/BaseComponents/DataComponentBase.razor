@namespace Carlton.Base.State
@typeparam TViewModel
@implements IDataComponent<TViewModel>
@inject ILogger<DataComponentBase<TViewModel>> Logger

@code {
    [Parameter]
    public TViewModel ViewModel { get; set; }
    [Parameter]
    public Func<Task<TViewModel>> GetViewModel { get; init; }
    [Parameter]
    public EventCallback<ICommand> OnComponentEvent { get; init; }

    protected override void OnInitialized()
    {
        Logger.LogDebug($"DataComponentBase OnInitalized Started");
        base.OnInitialized();
        Logger.LogDebug($"DataComponentBase OnInitalized Completed");
    }

    protected async override Task OnInitializedAsync()
    {
        Logger.LogDebug($"DataComponentBase OnInitalizedAsync Started");
        await base.OnInitializedAsync();
        Logger.LogDebug($"DataComponentBase OnInitalizedAsync Completed");
    }

    protected override void OnParametersSet()
    {
        Logger.LogDebug($"DataComponentBase OnParametersSet Started");
        base.OnParametersSet();
        Logger.LogDebug($"DataComponentBase OnParametersSet Completed");
    }

    protected override async Task OnParametersSetAsync()
    {
        Logger.LogDebug($"DataComponentBase OnParametersSetAsync Started");
        await base.OnParametersSetAsync();
        Logger.LogDebug($"DataComponentBase OnParametersSetAsync Completed");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogDebug($"DataComponentBase OnAfterRender started");
        base.OnAfterRender(firstRender);
        Logger.LogDebug($"DataComponentBase OnAfterRender Completed");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogDebug($"DataComponentBase OnAfterRenderAsync started");
        await base.OnAfterRenderAsync(firstRender);
        Logger.LogDebug($"DataComponentBase OnAfterRenderAsync Completed");
    }
}
