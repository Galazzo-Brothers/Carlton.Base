@namespace Carlton.Core.Components.Library
@typeparam TItem

<div class="table-container">
    <div class="table-row">
        <TableHeader TItem="TItem"
                     Headings="Headings"
                     OrderColumn="@OrderColumn"
                     OrderAscending="OrderAscending"
                     OnItemsOrdered="(args)=>OnOrderingChanged(args)" />
    </div>
    @foreach (var item in Items)
    {
        @RowTemplate(item)
    }
    @if (ShowPaginationRow)
    {
        <div class="table-row">
            <TablePaginationRow TItem="TItem"
                                RowsPerPageOpts="RowsPerPageOpts"
                                TotalItemCount="AllItems.Count()"
                                CurrentPage="CurrentPage"
                                SelectedRowsPerPageIndex="SelectedRowsPerPageIndex"
                                OnPageChanged="OnPageChanged"
                                OnRowsPerPageChanged="OnRowsPerPageChanged" />
        </div>
    }
</div>



@code {
    [Parameter]
    public IEnumerable<TableHeadingItem> Headings { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = new List<TItem>();

    [Parameter]
    public RenderFragment<TItem> RowTemplate { get; set; }

    [Parameter]
    public bool ShowPaginationRow { get; set; }

    [Parameter]
    public IEnumerable<int> RowsPerPageOpts { get; set; }

    private int SelectedRowsPerPageIndex { get; set; } = 0;

    private int SelectedRowPerPageValue { get => RowsPerPageOpts.ElementAt(SelectedRowsPerPageIndex); }

    private int CurrentPage { get; set; } = 1;

    private string OrderColumn { get; set; }

    private bool OrderAscending { get; set; } = true;

    private IEnumerable<TItem> AllItems { get; set; } = new List<TItem>();

    protected override void OnParametersSet()
    {
        AllItems = Items;
        ResetPaginationAndOrdering();
        UpdatePagination();
        UpdateOrdering();
        base.OnParametersSet();
    }

    private void OnPageChanged(TablePageChangedArgs args)
    {
        CurrentPage = args.CurrentPage;
        UpdatePagination();
        UpdateOrdering();
    }

    private void OnRowsPerPageChanged(TableRowsPerPageChangedArgs args)
    {
        SelectedRowsPerPageIndex = args.SelectedRowsPerPageIndex;
        UpdatePagination();
        UpdateOrdering();
    }

    private void OnOrderingChanged(TableOrderingChangedArgs args)
    {
        OrderColumn = args.OrderColumn;
        OrderAscending = args.OrderAscending;
        UpdateOrdering();
    }

    private void UpdatePagination()
    {
        Items = AllItems.Skip((CurrentPage - 1) * SelectedRowPerPageValue)
                               .Take(SelectedRowPerPageValue)
                               .ToList();
    }

    private void UpdateOrdering()
    {
        if (string.IsNullOrEmpty(OrderColumn))
            return;

        var orderString = $"{OrderColumn}{(OrderAscending ? string.Empty : " desc")}";
        Items = Items.AsQueryable().OrderBy(orderString).ToList();
    }

    private void ResetPaginationAndOrdering()
    {
        CurrentPage = 1;
        OrderColumn = string.Empty;
        OrderAscending = true;
    }
}
