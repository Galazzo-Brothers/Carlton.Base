@namespace Carlton.Core.Components.Library
@typeparam TItem

<div class="table-header-row">
    @foreach(var (heading, i) in Headings.WithIndex())
    {
        <div class="@HeaderRowItemCss(heading.OrderColumn, i)" @onclick="()=>HeaderRowItemClick(heading.OrderColumn)">
            <span class="heading-text">@heading.DisplayName</span>
            <div class="sort-arrows">
                <span class="arrow-ascending mdi mdi-arrow-up"></span>
                <span class="arrow-descending mdi mdi-arrow-down"></span>
            </div>
        </div>
    }
</div>


@code {
    [Parameter]
    public IEnumerable<TableHeadingItem> Headings { get; set; }

    [Parameter]
    public string OrderColumn { get; set; }

    [Parameter]
    public bool OrderAscending { get; set; } = true;

    [Parameter]
    public EventCallback<TableOrderingChangedArgs> OnItemsOrdered { get; set; }

    private string HeaderRowItemCss(string selectedOrderColumn, int index)
    {
        return new CssBuilder("header-row-item")
                .AddClass("row-item")
                .AddClass("selected", OrderColumn == selectedOrderColumn)
                .AddClass("ascending", OrderAscending)
                .AddClass("descending", !OrderAscending)
                .AddClass($"heading-{index}")
                .Build();
    }

    private async Task HeaderRowItemClick(string selectedOrderColumn)
    {
        OrderAscending = (OrderColumn == selectedOrderColumn) ? !OrderAscending : true;
        OrderColumn = selectedOrderColumn;
        await OrderItems();
    }

    private async Task OrderItems()
    {
        if(string.IsNullOrEmpty(OrderColumn))
            return;

        await OnItemsOrdered.InvokeAsync(new TableOrderingChangedArgs(OrderColumn, OrderAscending));
    }
}
