@using Carlton.Core.Components.Tables
@using Carlton.Core.Foundation.State
@using Carlton.Core.LayoutServices.ViewState
@using Microsoft.Extensions.DependencyInjection
@namespace Carlton.Core.Layouts.Components
@typeparam TItem
@inherits Table<TItem>
@inject IViewStateService ViewStateService

@*
	A table that is wired up through the ViewState service to retain
	the table interaction state.
*@
<Table Headings="Headings"
	   Items="Items"
	   ShowPaginationRow="ShowPaginationRow"
	   RowsPerPageOptions="RowsPerPageOptions"
	   ZebraStripped="ZebraStripped"
	   Hoverable="Hoverable"
	   RowTemplate="RowTemplate"
	   ItemsEqualityComparer="ItemsEqualityComparer"
	   TableInteractionState="TableInteractionState"
	   OnTableInteraction="args =>
			{
				ViewStateService.Set<TableInteractionState>(FullViewStateKey, args);
				OnTableInteraction.InvokeAsync();
			}" />

@code {
	/// <summary>
	/// Gets or sets the view state key.
	/// </summary>
	[Parameter]
	public string ViewStateKey { get; set; }

	private string FullViewStateKey => $"{nameof(Table<TItem>)}_{ViewStateKey}";

	private IEnumerable<TItem> PreviousItems { get; set; }

	private TableInteractionState TableInteractionState => ViewStateService.Get<TableInteractionState>(FullViewStateKey);

	protected override void OnInitialized()
	{
		ViewStateService.InitializeKey<TableInteractionState>(FullViewStateKey, new TableInteractionState());
		base.OnInitialized();
	}

	protected override void OnParametersSet()
	{
		// Reset the TableInteractionState if the items have changed
		if (PreviousItems != null && !Enumerable.SequenceEqual(Items, PreviousItems, ItemsEqualityComparer))
		{
			var newState = TableInteractionState with { OrderByColumn = string.Empty, IsAscending = false, CurrentPage = 1 };
			ViewStateService.Set<TableInteractionState>(FullViewStateKey, newState);
		}

		PreviousItems = Items;
		base.OnParametersSet();
	}
}
