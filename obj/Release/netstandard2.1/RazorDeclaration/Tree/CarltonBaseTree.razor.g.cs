// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Carlton.Base.Client.Components.Tree
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\nicho\Documents\code\Project Carlton\libs\Carlton.Base.Infrastructure.Client\_imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\nicho\Documents\code\Project Carlton\libs\Carlton.Base.Infrastructure.Client\_imports.razor"
using Carlton.Base.Client.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\nicho\Documents\code\Project Carlton\libs\Carlton.Base.Infrastructure.Client\_imports.razor"
using Carlton.Base.Client.Components.Wrapper;

#line default
#line hidden
#nullable disable
    public partial class CarltonBaseTree<TNode> : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 34 "C:\Users\nicho\Documents\code\Project Carlton\libs\Carlton.Base.Infrastructure.Client\Tree\CarltonBaseTree.razor"
       

    [Parameter] public IEnumerable<TNode> Nodes { get; set; }

    [Parameter] public RenderFragment<TNode> TitleTemplate { get; set; }

    [Parameter] public TNode SelectedNode { get; set; }

    [Parameter] public EventCallback<TNode> SelectedNodeChanged { get; set; }

    [Parameter] public Func<TNode, IEnumerable<TNode>> ChildSelector { get; set; }

    [Parameter] public IList<TNode> ExpandedNodes { get; set; } = new List<TNode>();

    [Parameter] public EventCallback<IList<TNode>> ExpandedNodesChanged { get; set; }

    [Parameter] public TreeStyle Style { get; set; } = TreeStyle.DefaultTreeStyle;

    [Parameter] public bool Visible { get; set; } = true;

    [Parameter] public Func<TNode, bool> HasChildNodes { get; set; } = node => true;

    private void OnToggleNode(TNode node, bool expand)
    {
        var expanded = ExpandedNodes.Contains(node);

        if(expanded && !expand)
        {
            ExpandedNodes.Remove(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
        else if(!expanded && expand)
        {
            ExpandedNodes.Add(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
    }

    private void OnSelectNode(TNode node)
    {
        if(HasChildNodes.Invoke(node))
        {
            OnToggleNode(node, !ExpandedNodes.Contains(node));
        }
        else
        {
            SelectedNode = node;
            SelectedNodeChanged.InvokeAsync(node);
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
