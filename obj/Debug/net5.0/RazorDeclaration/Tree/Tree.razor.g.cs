// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Carlton.Base.Client.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\nicho\Documents\code\Project Carlton\Carlton.Base.Client.Componnents\_imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
    public partial class Tree<TNode> : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 33 "C:\Users\nicho\Documents\code\Project Carlton\Carlton.Base.Client.Componnents\Tree\Tree.razor"
       
    [Parameter]
    public IEnumerable<TreeItem<TNode>> Nodes { get; set; } = Enumerable.Empty<TreeItem<TNode>>();

    [Parameter]
    public RenderFragment<TreeItem<TNode>> TitleTemplate { get; set; }

    [Parameter]
    public TreeItem<TNode> SelectedNode { get; set; }

    [Parameter]
    public EventCallback<TreeItem<TNode>> SelectedNodeChanged { get; set; }

    [Parameter]
    public IList<TreeItem<TNode>> ExpandedNodes { get; set; } = new List<TreeItem<TNode>>();

    [Parameter]
    public EventCallback<IList<TreeItem<TNode>>> ExpandedNodesChanged { get; set; }

    [Parameter]
    public TreeStyle Style { get; set; } = TreeStyle.DefaultTreeStyle;

    [Parameter]
    public bool Visible { get; set; } = true;

    private void OnToggleNode(TreeItem<TNode> node, bool expand)
    {
        var expanded = ExpandedNodes.Contains(node);

        if(expanded && !expand)
        {
            ExpandedNodes.Remove(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
        else if(!expanded && expand)
        {
            ExpandedNodes.Add(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
    }

    private void OnSelectNode(TreeItem<TNode> node)
    {
        if(node.Children.Any())
        {
            OnToggleNode(node, !ExpandedNodes.Contains(node));
        }
        else
        {
            SelectedNode = node;
            SelectedNodeChanged.InvokeAsync(node);
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
